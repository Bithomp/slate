---
title: Bithomp API reference

language_tabs: # must be one of https://git.io/vQNgJ
  - shell: cURL
  - javascript: JavaScript
  - php: PHP

toc_footers:
  - <a href='https://xrplexplorer.com/admin'>Request an API Key</a>
  - <a href='https://write.as/bithomp/xrp-ledger-domain-verification'>XRPL domain verification</a>
  - <a href='https://github.com/bithomp/slate'>Edit this documentation on GitHub</a>

includes:
  - errors

search: true
---

# Introduction

Welcome to the Bithomp API!

Bithomp API endpoints will give you access to information on addresses, NFTs, usernames, validators, services and more.

This API is built to complement the <a href="https://xrpl.org/http-websocket-apis.html">rippled API</a>.

We have language bindings in Shell, JavaScript and PHP. You can view code examples in the dark area to the right, and you can switch the programming language of the examples with the tabs in the top right.

# Price and Limits

Bithomp API is free on the test networks:

TESTNET: `https://test.bithomp.com/api/v2/`, get your api key [here](https://test.bithomp.com/admin)

DEVNET: `https://dev.bithomp.com/api/v2/`, get your api key [here](https://dev.bithomp.com/admin)

XAHAU TESTNET: `https://test.xahauexplorer.com/api/v2/`, get your api key [here](https://test.xahauexplorer.com/admin)

For the mainnets we have the following plans:

MAINNET: `https://xrplexplorer.com/api/v2/`, get your api key [here](https://xrplexplorer.com/admin)

XAHAU: `https://xahauexplorer.com/api/v2/`, get your api key [here](https://xahauexplorer.com/admin)

API plans:

| Tier                    | Max requests / minute | Max request / 24h | NFT content plan | Price / month |
|-------------------------|------:|-------|-------|----------|
| Free (non-comercial use)| 10    | 2K    | Free  | 0        |
| Basic                   | 100   | 30K   | Free  | 30 EUR   |
| Standard*               | 400   | 120K  | Basic | 100 EUR  |
| Premium*                | 1000  | 300K  | Basic | 250 EUR  |
| Enterprise*             | 2000  | 600K  | Basic | 500 EUR  |
| <a href="#on-demand">On-demand*</a> | N/A   | N/A   | Free   | 0.0005 XRP / request |

* On that plan the <a href="#nft">**NFT**</a>, <a href="#nfts">**NFTs**</a>, <a href="#nft-offers">**NFT offers**</a> endpoints returns `assets` with direct URLs to cached and resized images and videos.

NFT content plans (Direct access to fast [resized and cached] images and videos):

- images (700px x 700px)
- videos (first 15 seconds)
- preview (image, otherwise a frame from a video, 360px x 360px)
- thumbnails (image, otherwise a frame from a video, 64px x 64px)

| Tier                     | Max Images day / month | Max Videos day / month | Max Thumbnails day / month | Price / month |
|--------------------------|------------|------------|------------|----------|
| Free (non-comercial use) | 1K / 20K   | 300 / 6K   | 5K / 50K   | 0        |
| Basic                    | 5K / 100K  | 1.5K / 30K | 25K / 250K | 60 EUR   |
| Standard                 | 10K / 200K | 3K / 60K   | 50K / 500K | 100 EUR  |
| Premium                  | 20K / 400K | 6K / 120K  | 100K / 1M  | 200 EUR  |

- <a href="https://xrplexplorer.com/admin">Request an API key</a>

- To get your payment details please reply to the email with your API key.

# Changelog

### 20th of September 2024

A new endpoint was added:

<a href="#nft-collections">**NFT Collections**</a>
Search for a specific collection by name, description, issuer or get an ordered list of NFT collections.

### 26th of August 2024

The new list option: `collections` was added to the <a href="#nft-volumes-extended">**NFT Volumes Extended**</a> API end-point.
Now you can get a list of NFT collections with their extended data like `floorPrice`, `statistics` and `assets` (collection preview images).

### 16th of August 2024

The new query parameter: `ids` was added to the <a href="#nfts">**NFTs**</a> API end-point.
Now you can get a list of NFTs by their IDs. (Available for the Standard plan and higher).

### 15th of August 2024

The new query parameter: `limit` was added to the <a href="#nfts">**NFTs**</a> API end-point.
Now you can limit the number of NFTs returned and even return more than 100 NFTs in one request if you have a Standart plan or higher.

The new query parameter: `assets` was added to the <a href="#nft-offer">**NFT Offer**</a>, <a href="#nft-offers">**NFT Offers**</a> and <a href="#nfts">**NFTs**</a> API end-points.
Now you can get the direct URLs to cached and resized images and videos inside NFT offers and NFT lists.

### 10th of August 2024

Five new query parameters: `sellOffers`, `buyOffers`, `history`, `offersValidate`,  and `offersHistory` were added to the <a href="#nfts">**NFTs**</a> API end-point.
You can get an extensive data for the list of NFTs in one request. (Available for the Premium plan and higher).

### 23rd of June 2024

A new endpoint was added:

<a href="#tx-details">**Tx Details**</a>
Get transaction details.

### 25st of April 2024

A new endpoint was added:

<a href="#amms">**AMMs**</a>
Get the ordered list of AMMs.

Two new query parameters: `ledgerIndex` and `ledgerTimestamp` were added to the <a href="#amm-pool">**AMM Pool**</a> API end-point.
Now you can get AMM data for a specific ledger index or timestamp.

### 21st of April 2024

A new endpoint was added:

<a href="#amm-pool">**AMM Pool**</a>

### 15th of April 2024

The new query parameter: `order` was added to the <a href="#nft-distribution">**NFT Distribution**</a>
Now you can order NFT owners by count of total, self-issued or non-self-issued NFTs.

### 20th of February 2024

A new endpoint was added:

<a href="#account-activations">**Account Activations**</a>

### 19th of February 2024

Two new endpoints were added:

<a href="#nft-mint-chart">**NFT Mint Chart**</a>

<a href="#nft-sales-chart">**NFT Sales Chart**</a>

### 16th of February 2024

Two new query parameters: `buyer` and `seller` were added to the <a href="#nft-sales">**NFT Sales**</a> API end-point.
You can search for sales by a specific buyer and/or seller.

# Direct URL examples

### XRPL Explorer

* <a href="https://xrplexplorer.com/explorer/F10AB598E3197342C8FE173FB3AB5408E30B00F7B4838FDA645BB01AADBD9112">https://xrplexplorer.com/explorer/{txid}</a>
* <a href="https://xrplexplorer.com/explorer/rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B">https://xrplexplorer.com/explorer/{address}</a>
* <a href="https://xrplexplorer.com/explorer/bitstamp">https://xrplexplorer.com/explorer/{username}</a>
* <a href="https://xrplexplorer.com/explorer/02C7004B041A91880000526964776F726C643836">https://xrplexplorer.com/explorer/{NFT-XLS14 || HEXcurrency}</a>
* <a href="https://xrplexplorer.com/explorer/rabbit$bithomp.com">https://xrplexplorer.com/explorer/{payString}</a>

### NFT explorer
* <a href="https://xrplexplorer.com/nft/00081388161A9F1B349F3D50596D02CCA65E97D9268A5AF529A955040000000D">https://xrplexplorer.com/nft/{nftID}</a>
* <a href="https://xrplexplorer.com/nft-offer/3E8E975E0CFDF2EDE76E0925EB4393A1899061047DE1F46F0DEEA783F5F1A673">https://xrplexplorer.com/nft-offer/{nftOfferID}</a>
* <a href="https://xrplexplorer.com/nft-offers/rDpLcKCi18ixgzJEseKbi2krRGTWZM69gX">https://xrplexplorer.com/nft-offers/{address || username}</a>
* <a href="https://xrplexplorer.com/nft-explorer?issuer=xSPECTAR&taxon=2&owner=xSPECTAR">https://xrplexplorer.com/nft-explorer?owner={address || username}&issuer={address || username}&taxon={taxon}</a>
* <a href="https://xrplexplorer.com/nfts/xSPECTAR">https://xrplexplorer.com/nfts/{address || username}</a>
* <a href="https://xrplexplorer.com/nft-volumes?currency=534F4C4F00000000000000000000000000000000&currencyIssuer=rsoLo2S1kiGeCcn6hCUXVrCpGMWLrRrLZz">https://xrplexplorer.com/nft-volumes?currency={currencyCode}&currencyIssuer={address}&sale={"primary" || "secondary" || "all"}&period={"all" || "month" || "week" || "day"}&list={"issuers" || "currencies" || "brokers"}</a>
* <a href="https://xrplexplorer.com/nft-sales?list=top&period=month&sale=secondary&currency=58706F7373756D00000000000000000000000000&currencyIssuer=rfQr7LLaNvG93A3e2h6tjub3pi2oNTbvMA&issuer=rwvQWhjpUncjEbhsD2V9tv4YpKXjfH5RDj">https://xrplexplorer.com/nft-sales?list=top&period=month&sale=secondary&currency={currencyCode}&currencyIssuer={address}&issuer={address || username}</a>
* <a href="https://xrplexplorer.com/nft-sales?list=last&period=month&sale=secondary&currency=58706F7373756D00000000000000000000000000&currencyIssuer=rfQr7LLaNvG93A3e2h6tjub3pi2oNTbvMA&issuer=rwvQWhjpUncjEbhsD2V9tv4YpKXjfH5RDj">https://xrplexplorer.com/nft-sales?list=last&period=month&sale=secondary&currency={currencyCode}&currencyIssuer={address}&issuer={address || username}</a>

### AMM explorer
* <a href="https://xrplexplorer.com/amm/C55741BDA5F2590DD0F0EF7F620F133C0B73C382A8987068CA2DD886D99FD3B5">https://xrplexplorer.com/amm/{ammID}</a>
* <a href="https://xrplexplorer.com/amm/rUGqgPbzKFVsSkTYUk4hdRoPwTaLv1iSDS">https://xrplexplorer.com/amm/{address}</a>
* <a href="https://xrplexplorer.com/amm/03DD35D1879DBE4FE3290B911A14875DE6534DFD">https://xrplexplorer.com/amm/{LPtoken}</a>

### Username registration
* <a href="https://xrplexplorer.com/username?username=Bithomp">https://xrplexplorer.com/username?username={username}</a>
* <a href="https://xrplexplorer.com/username?address=rsuUjfWxrACCAwGQDsNeZUhpzXf1n1NK5Z">https://xrplexplorer.com/username?address={address}</a>
* <a href="https://xrplexplorer.com/username?address=rsuUjfWxrACCAwGQDsNeZUhpzXf1n1NK5Z&username=Bithomp">https://xrplexplorer.com/username?address={address}&username={username}</a>

# Authentication

> To authorize, use this code:

```shell
# With shell, you can just pass the correct header with each request
curl "api_endpoint_here"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
```

```javascript
// With javascript, you can just pass the correct header with each request
// Include jquery in order to use $.ajax or rewrite to vanila.js

function bithompRequest(url, callback) {
  $.ajax({
     url: url,
     type: "GET",
     contentType: "application/json",
     headers: {
        "x-bithomp-token": "abcd-abcd-0000-abcd-0123abcdabcd"
     },
     success: function(result) {
        callback(result);
     },
     error: function(error) {
        console.log(error);
        callback({"error": "error occurred"});
     }
  });
}

bithompRequest("api_endpoint_here", callback);
//replace callback with your function to process a received json

```

```php
function curl_bithomp($url) {
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_HTTPHEADER,
        array('x-bithomp-token:abcd-abcd-0000-abcd-0123abcdabcd')
    );
    $output = curl_exec($ch);
    curl_close($ch);
    return $output;
}

print curl_bithomp("api_endpoint_here")
```

> Make sure to replace `abcd-abcd-0000-abcd-0123abcdabcd` with your API key.

Unless you are using our <a href="#on-demand">on-demand</a> option, in order to use our APIs you need to request an API key via [the partner portal](https://xrplexplorer.com/admin).

Bithomp expects for the API key to be included in all API requests to the server in a header that looks like the following:

`x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd`

<aside class="notice">
You must replace <code>abcd-abcd-0000-abcd-0123abcdabcd</code> with your personal API key.
</aside>

## On-demand

To use our on-demand option, no API key is required. All requests should be made using `https://run.api.dhali.io/d995db530-7e57-46d1-ac8a-76324794e0c9` as the base URL. All subsequent paths, query strings, etc, remain the same. 
In addition, you should create a payment claim with enough value using the following button.
After retrieving your payment claim (a json), you must embed it into request headers using the header key: `Payment-Claim`. 
<div class="dhali-button-container"><button  class="dhali-button" onclick="openDhaliPaymentDialog()">Create payment claim</button></div>

<script>
  function openDhaliPaymentDialog() {
    var myWindow = window.open("https://pay.dhali.io/?exampleGetUrl=https://run.api.dhali.io/d995db530-7e57-46d1-ac8a-76324794e0c9/nft-count/xpunks?list=owners", "MsgWindow", "width=500,height=700");
    myWindow.focus();
}
</script>
<style>
    .dhali-button {
        background-color: #0000ff;
        color: white;
        padding: 8px 10px;
        border: none;
        border-radius: 4px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 0px 30px;
        transition-duration: 0.4s;
        cursor: pointer;
    }

    .dhali-button:hover {
        background-color: #6f6ffd;
        color: rgb(255, 255, 255);
    }
    
    .dhali-button-container {
      text-align: left;
    }
</style>

> After preparing your payment claim:

```shell
# Define a payment claim and submit it as part of your API request
PAYMENT_CLAIM='{"account":"my-classic-address","destination_account":"rLggTEwmTe3eJgyQbCSk4wQazow2TeKrtR","authorized_to_claim":"94875","signature":"a-signature","channel_id":"a-channel-id"}'
curl -H "Payment-Claim: $PAYMENT_CLAIM" https://run.api.dhali.io/d995db530-7e57-46d1-ac8a-76324794e0c9/nft-count/xpunks?list=owners
```

```javascript

const PAYMENT_CLAIM = JSON.stringify({
    account: "my-classic-address",
    destination_account: "rLggTEwmTe3eJgyQbCSk4wQazow2TeKrtR",
    authorized_to_claim: "94875",
    signature: "a-signature",
    channel_id: "a-channel-id"
});

fetch('https://run.api.dhali.io/d995db530-7e57-46d1-ac8a-76324794e0c9/nft-count/xpunks?list=owners', {
    method: 'GET',
    headers: {
        'Payment-Claim': PAYMENT_CLAIM
    }
})
.then(response => response.json())
.then(data => console.log(data))
.catch(error => console.error('Error:', error));

```

```php
$paymentClaim = json_encode([
    "account" => "my-classic-address",
    "destination_account" => "rLggTEwmTe3eJgyQbCSk4wQazow2TeKrtR",
    "authorized_to_claim" => "94875",
    "signature" => "a-signature",
    "channel_id" => "a-channel-id"
]);

$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, "https://run.api.dhali.io/d995db530-7e57-46d1-ac8a-76324794e0c9/nft-count/xpunks?list=owners");
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_HTTPHEADER, [
    "Payment-Claim: $paymentClaim"
]);

$response = curl_exec($ch);
if (curl_errno($ch)) {
    echo 'Error:' . curl_error($ch);
} else {
    echo $response;
}
curl_close($ch);
```

# Username

## Get username for an address

```shell
curl "https://xrplexplorer.com/api/v2/address/rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B?username=true"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
```

```javascript
function getData(json) {
  console.log(json)
}
bithompRequest("https://xrplexplorer.com/api/v2/address/rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B?username=true", getData);
```

```php
$data = curl_bithomp("https://xrplexplorer.com/api/v2/address/rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B?username=true");
print $data;
```

> The above command returns JSON structured like this:

```json
{
  "address": "rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B",
  "xAddress": "X7WZKEeNVS2p9Tire9DtNFkzWBZbFtJHWxDjN9fCrBGqVA4",
  "username": "Bitstamp"
}
```

This endpoint retrieves a username for a requested XRPL address.

### HTTP Request

`GET https://xrplexplorer.com/api/v2/address/<address>?username=true`

### URL Parameters

Parameter | Description
--------- | -----------
address | The XRPL address, can be r-address or a X-address

### Query Parameters

Parameter | Default | Description
--------- | ------- | -----------
username | false | If set to true, the result will also include a `username` (rippletrade or bithomp).

## Get address information by a username

```shell
curl "https://xrplexplorer.com/api/v2/username/xrptipbot?service=true&parent=true&verifiedDomain=true"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
```

```javascript
function getData(json) {
  console.log(json)
}
bithompRequest("https://xrplexplorer.com/api/v2/username/xrptipbot?service=true&parent=true&verifiedDomain=true", getData);
```

```php
$data = curl_bithomp("https://xrplexplorer.com/api/v2/username/xrptipbot?service=true&parent=true&verifiedDomain=true");
print $data;
```

> The above command returns JSON structured like this:

```json
{
  "address": "rPEPPER7kfTD9w2To4CQk6UCfuHM9c6GDY",
  "xAddress": "XV5sbjUmgPpvXv4ixFWZ5ptAYZ6PD2gYsjNFQLKYW33DzBm",
  "inception": 1513126312,
  "username": "xrptipbot",
  "service": {
    "name": "XRP Tip Bot",
    "domain": "xrptipbot.com",
    "socialAccounts": {
      "twitter": "xrptipbot"
      "facebook": null,
      "youtube": null,
      "instagram": null,
      "linkedin": null,
      "reddit": null,
      "medium": null,
      "steemit": null,
      "telegram": null
    }
  },
  "verifiedDomain": "xrptipbot.com",
  "parent": {
    "address": "rDsbeomae4FXwgQTJp9Rs64Qg9vDiTCdBv",
    "xAddress": "XV3oNHx95sqdCkTDCBCVsVeuBmvh2du1vBfJR24EqdgwHDW",
    "inception": 1481884572,
    "service": {
      "name": "Bitstamp",
      "domain": "bitstamp.net",
      "socialAccounts": {
        "twitter": "Bitstamp",
        "facebook": "Bitstamp",
        "youtube": null,
        "instagram": null,
        "linkedin": null,
        "reddit": null,
        "medium": null,
        "steemit": null,
        "telegram": null
      }
    },
  }
}
```

This endpoint retrieves information for a requested Username.

### HTTP Request

`GET https://xrplexplorer.com/api/v2/username/<username>`

### URL Parameters

Parameter | Description
--------- | -----------
username | A bithomp or an old rippletrade username

### Query Parameters

Parameter | Default | Description
--------- | ------- | -----------
service | false | If set to true, the result will also include Service details.
verifiedDomain | false | If set true, the result will include a <a href="https://coil.com/p/ihomp/XRP-Ledger-domain-verification/uJKPWh_4C">verifiedDomain</a> if such exists.
hashicon | false | If set true, the result will include hashicon which can be used in img's src="" or in css, as background's url. (The icon is the same for x-address and r-address, such hashicons used in ToastWallet and Bithomp.)
parent | false | If set to true, the result will include the same info for a parent account.

<aside class="notice">
Exclude unnecessary parameters to make your request faster.
</aside>

# AMM

## AMMs

```shell
curl "https://xrplexplorer.com/api/v2/amms"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
```

```javascript
function getData(json) {
  console.log(json)
}
bithompRequest("https://xrplexplorer.com/api/v2/amms", getData);
```

```php
$data = curl_bithomp("https://xrplexplorer.com/api/v2/amms");
print $data;
```

> The above command returns JSON structured like this:

```json
{
  "order": "createdOld",
  "marker": "16E5DAA100000001",
  "amms": [
    {
      "ammID": "51DFB0A87FF1606C4413D1E7581FF969C41D53A1B142B5A9FD91A1AE478F92F2",
      "createdAt": 1711138371,
      "createdLedgerIndex": 86795283,
      "createdTxHash": "BDCC35ED3EEA1F6E4AC76C21395F98239BACF9D59708CF3A4560830FF734AEF7",
      "updatedAt": 1711138371,
      "updatedLedgerIndex": 86795283,
      "updatedTxHash": "BDCC35ED3EEA1F6E4AC76C21395F98239BACF9D59708CF3A4560830FF734AEF7",
      "account": "r4Xt6n57NW1qEgm3RhZrYE7uTdzkCy8eqL",
      "accountDetails": {
        "username": null,
        "service": null
      },
      "ownerNode": "0",
      "amount": "236219041",
      "amount2": {
        "currency": "XSG",
        "issuer": "rXSGuKAkUGkPL6iUMJWX1Fi5bogsVYPMs",
        "value": "12.70007695950302",
        "issuerDetails": {
          "username": "XSGCoin",
          "service": "XSGCoin"
        }
      },
      "tradingFee": null,
      "auctionSlot": {
        "account": "rXSGjb9nTn46LZh8PEgeRXKd239AYuZHa",
        "accountDetails": {
          "username": null,
          "service": null
        },
        "discountedFee": null,
        "expiration": 1711224770,
        "price": {
          "currency": "03880B1D8FC30AA9E81656479E7C98A18A912373",
          "issuer": "r4Xt6n57NW1qEgm3RhZrYE7uTdzkCy8eqL",
          "value": "0",
          "issuerDetails": {
            "username": null,
            "service": null
          }
        }
      },
      "lpTokenBalance": {
        "currency": "03880B1D8FC30AA9E81656479E7C98A18A912373",
        "issuer": "r4Xt6n57NW1qEgm3RhZrYE7uTdzkCy8eqL",
        "value": "54772.2557505166",
        "issuerDetails": {
          "username": null,
          "service": null
        }
      },
      "voteSlots": [
        {
          "createdAt": 1711138371,
          "createdLedgerIndex": 86795283,
          "createdTxHash": "BDCC35ED3EEA1F6E4AC76C21395F98239BACF9D59708CF3A4560830FF734AEF7",
          "updatedAt": 1711138371,
          "updatedLedgerIndex": 86795283,
          "updatedTxHash": "BDCC35ED3EEA1F6E4AC76C21395F98239BACF9D59708CF3A4560830FF734AEF7",
          "account": "rXSGjb9nTn46LZh8PEgeRXKd239AYuZHa",
          "accountDetails": {
            "username": null,
            "service": null
          },
          "tradingFee": null,
          "voteWeight": 100000
        }
      ]
    }
  ]
}
```

This endpoint returns a list of AMM pools.

### HTTP Request

`GET https://xrplexplorer.com/api/v2/amms`

### Query Parameters

Parameter | Default | Description
--------- | ------- | -----------
order | `createdOld` | in which order the AMMs should be returned (`createdOld`, `createdNew`, `updatedOld`, `updatedNew`), `currencyHigh` - if you need to sort it by Asset1 or Asset2 balances, then specify also the `sortCurrency` parameter
sortCurrency | null | If you want to sort by Asset1 or Asset2 balances, make sure `order` is set to `currencyHigh` and `sortCurrency` is set as for example `XRP`
sortCurrencyIssuer | null | currency issuer for `sortCurrency` in case of an IOU

## AMM Pool

```shell
curl "https://xrplexplorer.com/api/v2/amm/C55741BDA5F2590DD0F0EF7F620F133C0B73C382A8987068CA2DD886D99FD3B5"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
```

```javascript
function getData(json) {
  console.log(json)
}
bithompRequest("https://xrplexplorer.com/api/v2/amm/C55741BDA5F2590DD0F0EF7F620F133C0B73C382A8987068CA2DD886D99FD3B5", getData);
```

```php
$data = curl_bithomp("https://xrplexplorer.com/api/v2/amm/C55741BDA5F2590DD0F0EF7F620F133C0B73C382A8987068CA2DD886D99FD3B5");
print $data;
```

> The above command returns JSON structured like this:

```json
{
  "ammID": "C55741BDA5F2590DD0F0EF7F620F133C0B73C382A8987068CA2DD886D99FD3B5",
  "createdAt": 1711139081,
  "createdLedgerIndex": 86795469,
  "createdTxHash": "A23BEB55D660AD02755CFCDAB1D34A3DAD6B84519A77C10932CC158626F4EDA3",
  "updatedAt": 1713700900,
  "updatedLedgerIndex": 87461194,
  "updatedTxHash": "622E376CDE8DC6B80DCDF2C7C8590A0281FC01885F617EDAADE223B39BE17B00",
  "account": "rUGqgPbzKFVsSkTYUk4hdRoPwTaLv1iSDS",
  "accountDetails": {
    "username": null,
    "service": null
  },
  "ownerNode": "0",
  "amount": "13820630640",
  "amount2": {
    "currency": "7853504543544152000000000000000000000000",
    "issuer": "rh5jzTCdMRCVjQ7LT6zucjezC47KATkuvv",
    "value": "173068.8207730273",
    "issuerDetails": {
      "username": null,
      "service": null
    }
  },
  "tradingFee": 290,
  "auctionSlot": {
    "account": "rpGhdshAMiVYPei3FtusVTPndijbpdATna",
    "accountDetails": {
      "username": null,
      "service": null
    },
    "discountedFee": 29,
    "expiration": 1713301051,
    "price": {
      "currency": "03DD35D1879DBE4FE3290B911A14875DE6534DFD",
      "issuer": "rUGqgPbzKFVsSkTYUk4hdRoPwTaLv1iSDS",
      "value": "5000",
      "issuerDetails": {
        "username": null,
        "service": null
      }
    }
  },
  "lpTokenBalance": {
    "currency": "03DD35D1879DBE4FE3290B911A14875DE6534DFD",
    "issuer": "rUGqgPbzKFVsSkTYUk4hdRoPwTaLv1iSDS",
    "value": "6591411.572091643",
    "issuerDetails": {
      "username": null,
      "service": null
    }
  },
  "voteSlots": [
    {
      "createdAt": 1712859131,
      "createdLedgerIndex": 87242106,
      "createdTxHash": "D4D6ED2059242EC15B8E3FEE95BD0BBD803C7446D4A45FD3D3DC2ACF2845155A",
      "updatedAt": 1713675981,
      "updatedLedgerIndex": 87454715,
      "updatedTxHash": "6F50879E1FE149F54833110E21100888897FF53274226DEE5027DFE0F3E75BE3",
      "account": "rpSw2Z5Rj7envE1reaD3K1As1pcjND4n7J",
      "accountDetails": {
        "username": null,
        "service": null
      },
      "tradingFee": 300,
      "voteWeight": 17649
    },
    {
      "createdAt": 1713042481,
      "createdLedgerIndex": 87289771,
      "createdTxHash": "FEBCDB280FC220AFF5E113EA7C2A73955DAD79F01F603F2E60BA00A247D17CB5",
      "updatedAt": 1713398941,
      "updatedLedgerIndex": 87382534,
      "updatedTxHash": "7EFE2737FD5B939A66AAEF15AB3D6D5EFB0EBC8F9F0601E6A2209B7610B633FC",
      "account": "rsQUooXEaA6KXAZdwuNJ934MyMQmTEDnpt",
      "accountDetails": {
        "username": null,
        "service": null
      },
      "tradingFee": 470,
      "voteWeight": 0
    },
    {
      "createdAt": 1712853831,
      "createdLedgerIndex": 87240726,
      "createdTxHash": "77E804B23F474B43EB799CBDC86399A6747FDE5087445AE27C32735540E73410",
      "updatedAt": 1713675981,
      "updatedLedgerIndex": 87454715,
      "updatedTxHash": "6F50879E1FE149F54833110E21100888897FF53274226DEE5027DFE0F3E75BE3",
      "account": "rpNmRsusXxqJoaDny4B3nVTqwkE1xDEDGt",
      "accountDetails": {
        "username": null,
        "service": null
      },
      "tradingFee": 90,
      "voteWeight": 913
    },
    {
      "createdAt": 1713398941,
      "createdLedgerIndex": 87382534,
      "createdTxHash": "7EFE2737FD5B939A66AAEF15AB3D6D5EFB0EBC8F9F0601E6A2209B7610B633FC",
      "updatedAt": 1713675981,
      "updatedLedgerIndex": 87454715,
      "updatedTxHash": "6F50879E1FE149F54833110E21100888897FF53274226DEE5027DFE0F3E75BE3",
      "account": "rDqtfMeAZJsJYDjn1J267qwY28rdC6arUp",
      "accountDetails": {
        "username": null,
        "service": null
      },
      "tradingFee": 470,
      "voteWeight": 6
    },
    {
      "createdAt": 1712875191,
      "createdLedgerIndex": 87246288,
      "createdTxHash": "391E10042E943BAD87BE96684C60FC69402A440184CD9975A0F64A2248280136",
      "updatedAt": 1712904090,
      "updatedLedgerIndex": 87253816,
      "updatedTxHash": "D8596802B8026AC6A84AE5D416B41C874EF16CD815BFB693470C27EF54A0E816",
      "account": "rupNhB3cLLzuc5V3kqVwkquBDKVUYftbX",
      "accountDetails": {
        "username": null,
        "service": null
      },
      "tradingFee": 750,
      "voteWeight": 0
    },
    {
      "createdAt": 1713675981,
      "createdLedgerIndex": 87454715,
      "createdTxHash": "6F50879E1FE149F54833110E21100888897FF53274226DEE5027DFE0F3E75BE3",
      "updatedAt": 1713675981,
      "updatedLedgerIndex": 87454715,
      "updatedTxHash": "6F50879E1FE149F54833110E21100888897FF53274226DEE5027DFE0F3E75BE3",
      "account": "rwDX9EJd9p5UNCaPpYoczd4opRpqEhSW4G",
      "accountDetails": {
        "username": null,
        "service": null
      },
      "tradingFee": 500,
      "voteWeight": 5
    }
  ]
}
```

This endpoint retrieves information for a requested AMM pool.

### HTTP Request

`GET https://xrplexplorer.com/api/v2/amm/<ammID || LPtoken || address>`

### URL Parameters

Parameter | Description
--------- | -----------
ammID | AMM ID 
LPtoken | LP token currency code
address | AMM account address

### Query Parameters

Parameter | Default | Description
--------- | ------- | -----------
ledgerIndex | null | ledger index (if set the request will return data for that ledger index)
ledgerTimestamp | null | ISO timestamp or unix timestamp (if set the request will return data for that timestamp)

# NFT (XLS-20 / XLS-35)

## NFT

```shell
curl "https://xrplexplorer.com/api/v2/nft/000861A8BB208DE9CB0384F2D46901203CA958EEA4C0AF286862C7F90000005E?sellOffers=true&buyOffers=true&uri=true&history=true&assets=true"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
```

```javascript
function getData(json) {
  console.log(json)
}
bithompRequest("https://xrplexplorer.com/api/v2/nft/000861A8BB208DE9CB0384F2D46901203CA958EEA4C0AF286862C7F90000005E?sellOffers=true&buyOffers=true&uri=true&history=true&assets=true", getData);
```

```php
$data = curl_bithomp("https://xrplexplorer.com/api/v2/nft/000861A8BB208DE9CB0384F2D46901203CA958EEA4C0AF286862C7F90000005E?sellOffers=true&buyOffers=true&uri=true&history=true&assets=true");
print $data;
```

> The above command returns JSON structured like this:

```json
{
  "flags": {
    "burnable": false,
    "onlyXRP": false,
    "trustLine": false,
    "transferable": true
  },
  "issuer": "rwzGnXc31zAeSQiKgGqFiJJcALhy8TUqb8",
  "issuerDetails": { 
    "username": "3DAPES", 
    "service": "3DAPES" 
  },
  "nftokenID": "000813886D8D6DAC402E0D27297E9485F4D7E1125D656678258B866100000018",
  "nftokenTaxon": 10194,
  "transferFee": 5000,
  "sequence": 24,
  "owner": "rpL8hpPgdep5MrWCFfWx2qupiAhtPrMcJu",
  "ownerDetails": {
    "username": null,
    "service": null
  },
  "uri": "68747470733A2F2F626166796265696734676876366263666B6E746B793234616564667A6B757276366C746A6476736763623575736E77336A736965736D68706769652E697066732E7733732E6C696E6B2F6D657461646174612E6A736F6E",
  "issuedAt": 1666885020,
  "ownerChangedAt": 1666885052,
  "deletedAt": null,
  "assets": {
    "image": "https://cdn.bithomp.com/image/image_hash.png", 
    "preview": "https://cdn.bithomp.com/preview/preview_hash.png", 
    "thumbnail": "https://cdn.bithomp.com/thumbnail/thumbail_hash.png",
    "video": "https://cdn.bithomp.com/video/video_hash"
  },
  "history": [
    {
      "owner": "rXMART8usFd5kABXCayoP6ZfB35b4v43t",
      "changedAt": 1666885020,
      "ledgerIndex": 6860081,
      "txHash": "453C088321BA9AFCB59B1B7B79790E5ECF53EF969B95845C494604E26C51E848",
      "marketplace": "onxrp.com"
    },
    {
      "owner": "rpL8hpPgdep5MrWCFfWx2qupiAhtPrMcJu",
      "changedAt": 1666885052,
      "ledgerIndex": 6860093,
      "txHash": "103F0D35348C58D9E5301EED79906ED3CDBBD44EFFF65857BE8BFFD572F617A8",
      "marketplace": "xrpcafe.com"
    }
  ],
  "sellOffers": [
    {
      "amount": "850000000",
      "index": "B54B49719DC80B40D66E229FC02CC5DABF7D4496B395F87C369FA6235AA6B37E",
      "owner": "rGJn1uZxDX4ksxRPYuj2smP7ZshdwjeSTG",
      "destination": "rM3UEiJzg7nMorRhdED5savWDt1Gqb6TLw",
      "expiration": 1582437632,
      "createdAt": 1582437132
    },
    {
      "amount": {
        "currency": "534F4C4F00000000000000000000000000000000",
        "issuer": "rsoLo2S1kiGeCcn6hCUXVrCpGMWLrRrLZz",
        "value": "10000"
      },
      "offerIndex": "E992835C148C9EAA7A93EABDD397A84333F27F99DA386255378A3C16A8B0DEF3",
      "owner": "r9spUPhPBfB6kQeF6vPhwmtFwRhBh2JUCG",
      "expiration": null,
      "destination": null,
      "createdAt": 1670721431,
      "createdLedgerIndex": 76344438,
      "createdTxHash": "616CAAAC1C737C964C4A3B27DEAFE2F172D5A82FDD9342A1F5C677ACABC5AE7B"
    }
  ],
  "buyOffers": [
    {
      "amount": "935000000",
      "offerIndex": "3D47DA5CE9E4D9DB7D8D1FE78E9E1ECA19D8DE21A29C78FD95A856ADF2472674",
      "owner": "rN5wU5VpqfxZ5q9duP3EhP8rw8y9xR1TNL",
      "destination": "rM3UEiJzg7nMorRhdED5savWDt1Gqb6TLw",
      "expiration": 1582437632,
      "createdAt": 1582437132,
      "createdLedgerIndex": 76332437,
      "createdTxHash": "616CAAAC1C737C964C4A3B27DEAFE2F172D5A82FDD9342A1F5C677ACABC5AE7B"
    }
  ]
}
```

This endpoint retrieves information for a requested NFT (XLS-20 or XLS-35).

### HTTP Request

`GET https://xrplexplorer.com/api/v2/nft/<nftID>`

### URL Parameters

Parameter | Description
--------- | -----------
nftID  | An NFT ID (XLS-20 or XLS-35)

### Query Parameters

Parameter | Default | Description
--------- | ------- | -----------
uri | false | If set to true, the result will include `uri` and `url`.
assets | false | (Only available on the Standart API plan or greater) If set to true, returns `assets` with direct urls for image 700px x 700px, video 15s, preview 360px x 360px (image, otherwise video frame) and thumbnail 64px x 64px. (See plans for NFT contents for more details or contact us)
sellOffers | false | If set true, the result will include `sellOffers`.
buyOffers | false | If set to true, the result will include `buyOffers`.
history | false | If set to true, the result will include `history`.
metadata | false | If set to true, the result will include `metadata`.
offersValidate | false | (Only available on paid API plans) If set to true, each offer will include `valid` as `true` or `false`, if `false` then it also include `validationErrors` array. 
offersHistory | false | (Only available on paid API plans) If set to true, each result will include historical offers which are already accepted or canceled.
convertCurrencies | null | (Only available on paid API plans) the list of currencies to convert amount to, splitted by comma, for example `xrp,usd` (40 fiat currencies available), the for `history` response  will have an array `amountInConvertCurrencies`

## NFT Offer

```shell
curl "https://xrplexplorer.com/api/v2/nft-offer/3E8E975E0CFDF2EDE76E0925EB4393A1899061047DE1F46F0DEEA783F5F1A673"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
```

```javascript
function getData(json) {
  console.log(json)
}
bithompRequest("https://xrplexplorer.com/api/v2/nft-offer/3E8E975E0CFDF2EDE76E0925EB4393A1899061047DE1F46F0DEEA783F5F1A673", getData);
```

```php
$data = curl_bithomp("https://xrplexplorer.com/api/v2/nft-offer/3E8E975E0CFDF2EDE76E0925EB4393A1899061047DE1F46F0DEEA783F5F1A673");
print $data;
```

> The above command returns JSON structured like this:

```json
{
  "nftokenID": "00081B581189F5687DBB7516339D6CCB5593D96622AD82DFE9E08966000018B7",
  "offerIndex": "3E8E975E0CFDF2EDE76E0925EB4393A1899061047DE1F46F0DEEA783F5F1A673",
  "createdAt": 1671813891,
  "createdLedgerIndex": 76627086,
  "createdTxHash": "C78692F7CE2B6D207E12BAF28BBE7BAD4D5553FEFCAC81A49FA0D7F2B6295AFD",
  "account": "rDpLcKCi18ixgzJEseKbi2krRGTWZM69gX",
  "owner": "rDpLcKCi18ixgzJEseKbi2krRGTWZM69gX",
  "destination": "rpZqTPC8GvrSvEfFsUuHkmPCg29GdQuXhC",
  "expiration": 1672009200,
  "amount": "1800000000",
  "flags": {
    "sellToken": false
  },
  "canceledAt": 1672062241,
  "canceledLedgerIndex": 76690834,
  "canceledTxHash": "BE00F6A40D399D66E15C5698A9F583A47FA79D47DB9E7D5B158679C97E95C202",
  "nftoken": {
    "flags": {
      "burnable": false,
      "onlyXRP": false,
      "trustLine": false,
      "transferable": true
    },
    "issuer": "rpbjkoncKiv1LkPWShzZksqYPzKXmUhTW7",
    "nftokenID": "00081B581189F5687DBB7516339D6CCB5593D96622AD82DFE9E08966000018B7",
    "nftokenTaxon": 52,
    "transferFee": 7000,
    "sequence": 6327,
    "owner": "rhrvq8Bfn1NwQQDDProJY4F822DNbcQGj2",
    "ownerDetails": {
      "username": "XPUNKS",
      "service": "XPUNKS"
    },
    "uri": null,
    "issuedAt": 1671616340,
    "ownerChangedAt": 1672061721,
    "deletedAt": null,
    "url": "https://marketplace-api.onxrp.com/api/metadata/00081B581189F5687DBB7516339D6CCB5593D96622AD82DFE9E08966000018B7",
    "metadata": {
      "dna": "81165c5b185d49e57302b8bf936ba66ded1a195476f35fc74d2d8c8d638d0c1f",
      "name": "XPUNKS #5658",
      "description": "The XPUNK collection consists of 10,000 uniquely generated characters on a 24-by 24-pixel canvas. They are distinguished by their colourful traits and trademark X-mouth that represents their love for the XRPL.",
      "image": "ipfs://QmUdz7aunEkMKWjTKT71QiJeKRX3MQSDC1chDUcyhwuYQ1",
      "imageHash": "1591d36c09c3340569582379574b8e899b550daa0d7bfecfe648fba469aaa2ee",
      "edition": 2687,
      "date": 1667163549733,
      "attributes": [
        {
          "trait_type": "Face",
          "value": "Male 3"
        },
        {
          "trait_type": "Eye Characteristics",
          "value": "Fresh"
        },
        {
          "trait_type": "Eyes",
          "value": "Black Right"
        },
        {
          "trait_type": "Neck Wearable",
          "value": "No Attribute"
        },
        {
          "trait_type": "Hair & Hats",
          "value": "Bandana"
        },
        {
          "trait_type": "Facial Hair",
          "value": "Thick Beard Blonde"
        },
        {
          "trait_type": "Eye Wearables",
          "value": "Sunglasses in Hair Black"
        },
        {
          "trait_type": "Mouth Attribute",
          "value": "Pipe Old School"
        },
        {
          "trait_type": "Piercings",
          "value": "No Attribute"
        }
      ],
      "schema": "ipfs://QmNpi8rcXEkohca8iXu7zysKKSJYqCvBJn3xJwga8jXqWU",
      "nftType": "art.v0",
      "collection": {
        "name": "XPUNKS",
        "description": "The XPUNK collection consists of 10,000 uniquely generated characters on a 24-by-24-pixel canvas. They are distinguished by their colorful traits and trademark X-mouth that represents their love for the XRPL."
      }
    },
    "issuerDetails": {
      "username": "XPUNKS",
      "service": "XPUNKS"
    },
    "ownerDetails": {
      "username": null,
      "service": null
    }
  },
  "accountDetails": {
    "username": null,
    "service": null
  },
  "ownerDetails": {
    "username": null,
    "service": null
  },
  "destinationDetails": {
    "username": null,
    "service": null
  },
  "issuerDetails": {
    "username": "XPUNKS",
    "service": "XPUNKS"
  }
}
```

This endpoint retrieves NFT Sales Volumes for specified parameters

### HTTP Request

`GET https://xrplexplorer.com/api/v2/nft-offer/<nftOfferID>`

### URL Parameters

Parameter | Description
--------- | -----------
nftOfferID  | An NFT Offer ID (XLS-20)

### Query Parameters

Parameter | Default | Description
--------- | ------- | -----------
assets | false | (Only available on the Standart API plan or greater) If set to true, returns `assets` with direct urls for image 700px x 700px, video 15s, preview 360px x 360px (image, otherwise video frame) and thumbnail 64px x 64px. (See plans for NFT contents for more details or contact us)

## NFTS

```shell
curl "https://xrplexplorer.com/api/v2/nfts?owner=rBeistBLWtUskF2YzzSwMSM2tgsK7ZD7ME&assets=true"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
```

```javascript
function getData(json) {
  console.log(json)
}
bithompRequest("https://xrplexplorer.com/api/v2/nfts?owner=rBeistBLWtUskF2YzzSwMSM2tgsK7ZD7ME&assets=true", getData);
```

```php
$data = curl_bithomp("https://xrplexplorer.com/api/v2/nfts?owner=rBeistBLWtUskF2YzzSwMSM2tgsK7ZD7ME&assets=true");
print $data;
```

> The above command returns JSON structured like this:

```json
{
  "owner": "rBeistBLWtUskF2YzzSwMSM2tgsK7ZD7ME",
  "ownerDetails": {
    "username": "Zerpmon",
    "service": "Zerpmon"
  },
  "nfts": [
    {
      "flags": {
        "burnable": false,
        "onlyXRP": false,
        "trustLine": false,
        "transferable": true
      },
      "issuer": "rBeistBLWtUskF2YzzSwMSM2tgsK7ZD7ME",
      "nftokenID": "0008138874D997D20619837CF3C7E1050A785E9F9AC53D7E8542EAAC00000011",
      "nftokenTaxon": 0,
      "transferFee": 5000,
      "uri": "697066733A2F2F516D627169774D736D6B4C6971794473465A664D534D566465464A674D4139514A626D735131636F4D32564343452F382E6A736F6E",
      "url": "https://cloudflare-ipfs.com/ipfs/QmbqiwMsmkLiqyDsFZfMSMVdeFJgMA9QJbmsQ1coM2VCCE/8.json",
      "sequence": 17,
      "issuerDetails": {
        "username": "Zerpmon",
        "service": "Zerpmon"
      },
      "assets": {
        "image": "https://cdn.bithomp.com/image/image_hash.png", 
        "preview": "https://cdn.bithomp.com/preview/preview_hash.png", 
        "thumbnail": "https://cdn.bithomp.com/thumbnail/thumbail_hash.png",
        "video": "https://cdn.bithomp.com/video/video_hash"
      },
      "metadata": {
        "name": "Purrf",
        "description": "Zerpmon is an original collection of digital collectible creatures that live on the XRPL, with each one being a unique 1 of 1 art piece. The Zerpmon project is fueled by a passion for high-quality art and in-depth story telling. For more information on the vision of Zerpmon, visit www.zerpmon.world",
        "image": "ipfs://Qmf52STemfXu79ovVAdjRneb7kKdtYJNvzYjoxWubbu4Vx/8.png",
        "attributes": [
          {
            "trait_type": "Zerpdex Number",
            "value": "Zerpmon Collab #8"
          },
          {
            "trait_type": "Type",
            "value": "Fairy"
          },
          {
            "trait_type": "Evolution Stage",
            "value": "Collab"
          }
        ]
      }
    }
  ]
}
```

This endpoint retrieves a List of NFTs (XLS-20 / XLS-35) for specified parameters

### HTTP Request

`GET https://xrplexplorer.com/api/v2/nfts`

### Query Parameters

Parameter | Default | Description
--------- | ------- | -----------
owner | null | The XRPL address of the Owner
issuer | null | The XRPL address of the Issuer
taxon | null | Taxon for that Issuer (optional, will be ignored without an Issuer)
assets | false | (Only available on the Standart API plan or greater) If set to true, returns `assets` with direct urls for image 700px x 700px, video 15s, preview 360px x 360px (image, otherwise video frame) and thumbnail 64px x 64px. (See plans for NFT contents for more details or contact us)
hasMetadata | false | set to `true`, to list NFTs only with available metadata
hasImage | false | set to `true`, to list NFTs only with available media data (preview images can be generated from images, videos, pdf files and 3d models)
includeDeleted | false | set to `true`, if you want result to include deleeted NFTs
mintedByMarketplace | null | Here you can specify a minter from https://xrplexplorer.com/nft-minters?period=all to filter your search by minter project.
marker | null | The marker from the previous request, if you need a next page of NFTs
list | `nfts` | (Only available on paid API plans) can be set to `onSale` to get the list of NFTs with active sell offers
destination | `all` | (Only available on paid API plans) used to filter NFTs for sale `list=onSale`, can be set as a XRPL address (to specify a particular MarketPlace), `public`, `knownBrokers`, `publicAndKnownBrokers`, `all`
order | null | (Only available on paid API plans) used to order NFTs: 1. for `list=nfts`, can be `mintedNew` and `mintedOld`, 2. for `list=onSale`, can be `offerCreatedNew`, `offerCreatedOld`, `priceLow`, `priceHigh`
currency | null | (Only available on paid API plans) used to filter NFTs for sale `list=onSale`, can be `XRP` or any other currency code.
currencyIssuer | null | (Only available on paid API plans) A currency issuer for the `currency` if it is not an XRP.
issuedAt | null | (Only available on paid API plans) It can be used to show NFTs which were minted during some period of time. A time period, all time `all`, last 24h `day`, last 7 days `week`, last 30 days `month`, last 365 days `year`, or `1671490800000..1671663600000` - period or `2022-12-20T00:00:00.000Z..2022-12-22T00:00:00.000Z`, to show from specific date till now: `1671490800000..` or `2022-12-20T00:00:00.000Z..`
deletedAt | null | (Only available on paid API plans) It can be used to show NFTs which were burned during some period of time. A time period, all time `all`, last 24h `day`, last 7 days `week`, last 30 days `month`, last 365 days `year`. or `1671490800000..1671663600000` - period or `2022-12-20T00:00:00.000Z..2022-12-22T00:00:00.000Z`, to show from specific date till now: `1671490800000..` or `2022-12-20T00:00:00.000Z..`
sellOffers | false | (Available for the Premium plan and higher) If set true, the NFTs will include `sellOffers`.
buyOffers | false | (Available for the Premium plan and higher) If set to true, the NFTs will include `buyOffers`.
history | false | (Available for the Premium plan and higher) If set to true, the NFTs will include `history`.
offersValidate | false | (Available for the Premium plan and higher) If set to true, each NFT offer will include `valid` as `true` or `false`, if `false` then it also include `validationErrors` array. 
offersHistory | false | (Available for the Premium plan and higher) If set to true, each NFT will include historical offers which are already accepted or canceled.
limit | 100 | The number of NFTs to return. (More than 100 is available for the Standart plan and higher).
ids | null | (Available for the Standard plan and higher) A list of NFT IDs separated by commas (max 100), to get information about specific NFTs. Formats: `ids=abc,def`, `ids[]=abc&ids[]=def` or `ids=abc&ids=def`.

## NFT Offers

```shell
curl "https://xrplexplorer.com/api/v2/nft-offers/rDpLcKCi18ixgzJEseKbi2krRGTWZM69gX?list=counterOffers&offersValidate=true&nftoken=true"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
```

```javascript
function getData(json) {
  console.log(json)
}
bithompRequest("https://xrplexplorer.com/api/v2/nft-offers/rDpLcKCi18ixgzJEseKbi2krRGTWZM69gX?list=counterOffers&offersValidate=true&nftoken=true", getData);
```

```php
$data = curl_bithomp("https://xrplexplorer.com/api/v2/nft-offers/rDpLcKCi18ixgzJEseKbi2krRGTWZM69gX?list=counterOffers&offersValidate=true&nftoken=true");
print $data;
```

> The above command returns JSON structured like this: 

```json
{
  "owner": "rDpLcKCi18ixgzJEseKbi2krRGTWZM69gX",
  "list": "offers",
  "ownerDetails": {
    "username": null,
    "service": null
  },
  "nftOffers": [
    {
      "nftokenID": "00081B581189F5687DBB7516339D6CCB5593D96622AD82DF41D3BA2E0000017F",
      "offerIndex": "84148E4C12F401F72767033BC13170AFC92B222B3D1365D1D59ED5A4193DD2C1",
      "createdAt": 1667359001,
      "createdLedgerIndex": 75471736,
      "createdTxHash": "899B95BD4D0F8D4DE80DAB145919D3FF55788CB9C25E25DB7B3755F7B6AA7293",
      "account": "rDbkpaT4jk5F17CqL11muJzzwhZtCStyg5",
      "owner": "rDbkpaT4jk5F17CqL11muJzzwhZtCStyg5",
      "destination": null,
      "expiration": null,
      "amount": "1500000000",
      "flags": {
        "sellToken": false
      },
      "nftoken": {
        "flags": {
          "burnable": false,
          "onlyXRP": false,
          "trustLine": false,
          "transferable": true
        },
        "issuer": "rpbjkoncKiv1LkPWShzZksqYPzKXmUhTW7",
        "nftokenID": "00081B581189F5687DBB7516339D6CCB5593D96622AD82DF41D3BA2E0000017F",
        "nftokenTaxon": 52,
        "transferFee": 7000,
        "sequence": 383,
        "owner": "rDpLcKCi18ixgzJEseKbi2krRGTWZM69gX",
        "uri": null,
        "issuedAt": 1667268851,
        "ownerChangedAt": 1667403840,
        "deletedAt": null,
        "url": "https://marketplace-api.onxrp.com/api/metadata/00081B581189F5687DBB7516339D6CCB5593D96622AD82DF41D3BA2E0000017F",
        "metadata": {
          "dna": "e48265739a191624244a717e9b233a11553d703af0e82739784f78f9d332a789",
          "name": "XPUNKS #383",
          "description": "The XPUNK collection consists of 10,000 uniquely generated characters on a 24-by 24-pixel canvas. They are distinguished by their colourful traits and trademark X-mouth that represents their love for the XRPL.",
          "image": "ipfs://QmdPgX2nHd91TYQ3uY8kyqNCciXxfqp3ATVrwWfiAfZiJo",
          "imageHash": "71db5411810b661b150ee05b7e19f12a3e0022b2a256f7a255679a5dce7ad487",
          "edition": 1482,
          "date": 1667163506360,
          "attributes": [
            {
              "trait_type": "Face",
              "value": "Male 4"
            },
            {
              "trait_type": "Eye Characteristics",
              "value": "Tired"
            },
            {
              "trait_type": "Eyes",
              "value": "Dark Brown Right"
            },
            {
              "trait_type": "Neck Wearable",
              "value": "Chain Gold"
            },
            {
              "trait_type": "Hair & Hats",
              "value": "Afro Hair Orange"
            },
            {
              "trait_type": "Facial Hair",
              "value": "No Attribute"
            },
            {
              "trait_type": "Eye Wearables",
              "value": "Clubmasters Vision Glasses"
            },
            {
              "trait_type": "Mouth Attribute",
              "value": "No Attribute"
            },
            {
              "trait_type": "Piercings",
              "value": "No Attribute"
            }
          ],
          "schema": "ipfs://QmNpi8rcXEkohca8iXu7zysKKSJYqCvBJn3xJwga8jXqWU",
          "nftType": "art.v0",
          "collection": {
            "name": "XPUNKS",
            "description": "The XPUNK collection consists of 10,000 uniquely generated characters on a 24-by-24-pixel canvas. They are distinguished by their colorful traits and trademark X-mouth that represents their love for the XRPL."
          }
        },
        "issuerDetails": {
          "username": "XPUNKS",
          "service": "XPUNKS"
        },
        "ownerDetails": {
          "username": null,
          "service": null
        }
      },
      "accountDetails": {
        "username": null,
        "service": null
      },
      "ownerDetails": {
        "username": null,
        "service": null
      },
      "valid": false,
      "validationErrors": [
        "Insufficient funds on the buyer account"
      ]
    }
  ]
}
```

This endpoint retrieves NFT Offers created by an `address` or NFT Offers for all NFTs owned by that `address`.

### HTTP Request

`GET https://xrplexplorer.com/api/v2/nft-offers/<address>`

### URL Parameters

Parameter | Description
--------- | -----------
address  | The XRPL address or a username.

### Query Parameters

Parameter | Default | Description
--------- | ------- | -----------
list | null | default - to list all owned NFT offers, `counterOffers` - to list NFT Offers for all NFTs owned by the `address`, `privatelyOfferedToAddress` - to list all NFT offers where the `address` is specified as destination (brokers, private offers, nft transfers).
nftoken | false | If set to true, each offer will include `nftoken` data, including metadata.
offersValidate | false | (Only available on paid API plans) If set to true, each offer will include `valid` as `true` or `false`, if `false` then it also include `validationErrors` array.
assets | false | (Only available on the Standart API plan or greater) If set to true, returns `assets` with direct urls for image 700px x 700px, video 15s, preview 360px x 360px (image, otherwise video frame) and thumbnail 64px x 64px. (See plans for NFT contents for more details or contact us)

## NFT Collections

```shell
curl "https://xrplexplorer.com/api/v2/nft-collections?search=zerpmon&assets=true&floorPrice=true"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
```

```javascript
function getData(json) {
  console.log(json)
}
bithompRequest("https://xrplexplorer.com/api/v2/nft-collections?search=zerpmon&assets=true&floorPrice=true", getData);
```

```php
$data = curl_bithomp("https://xrplexplorer.com/api/v2/nft-collections?search=zerpmon&assets=true&floorPrice=true");
print $data;
```

> The above command returns JSON structured like this:

```json
{
  "type": "xls20",
  "order": "createdNew",
  "search": "zerpmon",
  "collections": [
    {
      "collection": "rBNmfMkbqnWzht5tv7ndYm23FEE1LrbfUb:223",
      "name": "Ripple Effect - Side A (Tsunami Pack)",
      "family": null,
      "description": "Official Ripple Effect Album NFT with additional files and whitelist snapshot done on 2/23/2024 for all eligible XRPL NFT holders to receive a free NFT or more than one! As of 2/23/2024 if you own NFTs from the following XRPL projects you are eligible to mint this NFT for free!  Astute Scholars, XTAPES, 2023 = 322 NFT (Album), PixelXSkulls, Proof Of Stake NFT (Song), Tree Faces, Zerpmon, XBOT, Shemitah NFT (Song), Donnie, Rich Ducks Club, Enigmatic Ducks, XSpectar, Schmeckles, Astrals, Wahine Punk, XAliens, Power Zerps, JNKZ, Retro Punks, XZombie, Regulator Punk, Monkee Monkee and Chilled Chimps.  WHOA WHOA!",
      "image": "bafybeiaeywa575ijibphzcxgpyaamjlbflquht63zku2knhvkfavmagrvu/ripple effect side a nft2 animation.gif",
      "issuer": "rBNmfMkbqnWzht5tv7ndYm23FEE1LrbfUb",
      "issuerDetails": {
        "address": "rBNmfMkbqnWzht5tv7ndYm23FEE1LrbfUb",
        "username": null,
        "service": null
      },
      "taxon": 223,
      "floorPrices": [],
      "assets": {
        "image": "https://cdn.bithomp.com/image/hash/animation.gif",
        "preview": "https://cdn.bithomp.com/preview/hash/animation.gif",
        "thumbnail": "https://cdn.bithomp.com/thumbnail/hash/animation.gif"
      }
    },
    {
      "collection": "rH1phNM38p2Eva5fZV1rvdGdycKLdKiLtJ",
      "name": "Lil Ninja X Zerpmon",
      "family": null,
      "description": "The collection called “Lil Ninja X Zerpmon” reserved for collaboration auction with the legendary Zerpmon! This collection features Lil Ninja X with Zerpmon inspired attire and background scenery! Lil Ninja X NFT&#x27;s are awarded 1 point per Gold Piece in the monthly Rewards System which gives 25% of Sales Profits back to Holders, every single month as Rewards in XRP! This also contributes to your ranking on the LIL NINJA X Elder Scrolls of the Greatest Ripple Ninja Warriors.",
      "image": "bafybeigbkt6dalehmyojobqt7lpt5y42abzjqav6qvdyotasuc7btanr3a/image.jpeg",
      "floorPrices": [],
      "assets": {
        "image": "https://cdn.bithomp.com/image/hash/image.jpeg",
        "preview": "https://cdn.bithomp.com/preview/hash/image.jpeg",
        "thumbnail": "https://cdn.bithomp.com/thumbnail/hash/image.jpeg"
      }
    },
    {
      "collection": "rBNmfMkbqnWzht5tv7ndYm23FEE1LrbfUb:0",
      "name": "Zerpmon",
      "family": null,
      "description": "Official Zerpmon Song LemFT",
      "image": "bafybeigk5btpufwykocb2tosmbk3stfjijlmec6puk5ys5pvkfhdx4eita/thumbnail_Image-1 1600.png",
      "issuer": "rBNmfMkbqnWzht5tv7ndYm23FEE1LrbfUb",
      "issuerDetails": {
        "address": "rBNmfMkbqnWzht5tv7ndYm23FEE1LrbfUb",
        "username": null,
        "service": null
      },
      "taxon": 0,
      "floorPrices": [
        {
          "open": null,
          "private": {
            "amount": "589000000",
            "destination": "rpx9JThQ2y37FaGeeJP7PXDUVEXY3PHZSC",
            "destinationDetails": {
              "username": "xrpcafe",
              "service": "xrp.cafe"
            }
          }
        }
      ],
      "assets": {
        "image": "https://cdn.bithomp.com/image/hash/thumbnail_Image-1%201600.png",
        "preview": "https://cdn.bithomp.com/preview/hash/thumbnail_Image-1%201600.png",
        "thumbnail": "https://cdn.bithomp.com/thumbnail/hash/thumbnail_Image-1%201600.png"
      }
    }
  ]
}
```

This endpoint retrieves NFT Collection list for your search creterias.

### HTTP Request

`GET https://xrplexplorer.com/api/v2/nft-collections`

### Query Parameters

Parameter | Default | Description
--------- | ------- | -----------
order | `createdNew` | (optional) `createdNew`, `createdOld`, `updatedNew`, `updatedOld` (order list by the date when the first or last NFT was issued).
search | null | (optional) search by NFT Collection Name and Description.
assets | false | (Only available on the Standart API plan or greater) If set to true, returns `assets` with direct urls for NFT collection image 700px x 700px, video 15s, preview 360px x 360px (image, otherwise video frame) and thumbnail 64px x 64px. (See plans for NFT contents for more details or contact us)
limit | 100 | The number of NFTs to return. (More than 100 is available for the Standart plan and higher).
floorPrice | false | (Only available on paid API plans) If set to true, returns `floorPrices` with the lowest price for the NFT collection.
issuer | null | (optional) The address of the NFT Collection issuer (also works for Sologenic issuers).

## NFT Distribution

```shell
curl "https://xrplexplorer.com/api/v2/nft-owners?order=nonSelfIssued&issuer=rMCfTcW9k2Z21cm4zWj2mgHaTrxxrHtL7n&taxon=0"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
```

```javascript
function getData(json) {
  console.log(json)
}
bithompRequest("https://xrplexplorer.com/api/v2/nft-owners?order=nonSelfIssued&issuer=rMCfTcW9k2Z21cm4zWj2mgHaTrxxrHtL7n&taxon=0", getData);
```

```php
$data = curl_bithomp("https://xrplexplorer.com/api/v2/nft-owners?order=nonSelfIssued&issuer=rMCfTcW9k2Z21cm4zWj2mgHaTrxxrHtL7n&taxon=0");
print $data;
```

> The above command returns JSON structured like this:

```json
{
  "issuer": "rMCfTcW9k2Z21cm4zWj2mgHaTrxxrHtL7n",
  "issuerDetails": {
    "username": null,
    "service": null
  },
  "taxon": 0,
  "order": "nonSelfIssued",
  "summary": {
    "totalNfts": 6,
    "totalOwners": 5
  },
  "owners": [
    {
      "address": "rfakxbdmroQpQzZBL9caDP9RYxmSKuNZj5",
      "addressDetails": {
        "username": null,
        "service": null
      },
      "total": 2,
      "selfIssued": 0,
      "nonSelfIssued": 2
    },
    {
      "address": "r4iCcnDXzCZCDkrbWyebk5aNwg55R8PyB9",
      "addressDetails": {
        "username": null,
        "service": null
      },
      "total": 1,
      "selfIssued": 0,
      "nonSelfIssued": 1
    }
  ]
}
```

This endpoint retrieves NFT Owners list sorted by NFT count.

### HTTP Request

`GET https://xrplexplorer.com/api/v2/nft-owners`

### Query Parameters

Parameter | Default | Description
--------- | ------- | -----------
order | `total` | `nonSelfIssued`, `selfIssued`, `total` (order list by count of total owned NFTS, or only by self-issued NFTs, or only owned NFTs that issued by another address).
issuer | null | (optional) NFT issuer `address`, to see the NFT distribution for a specific issuer.
taxon | null | (optional) taxon for the `address` issuer, to see the NFT distribution of a collection identified by issuer and taxon.
marker | null | (available on paid plans only) The marker from the previous request, if you need a next page of NFT owners.

## NFT Sales

```shell
curl "https://xrplexplorer.com/api/v2/nft-sales?list=topSold&currency=xrp&convertCurrencies=usd,eur"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
```

```javascript
function getData(json) {
  console.log(json)
}
bithompRequest("https://xrplexplorer.com/api/v2/nft-sales?list=topSold&currency=xrp&convertCurrencies=usd,eur", getData);
```

```php
$data = curl_bithomp("https://xrplexplorer.com/api/v2/nft-sales?list=topSold&currency=xrp&convertCurrencies=usd,eur");
print $data;
```

> The above command returns JSON structured like this:

```json
{
  "list": "topSold",
  "saleType": "all",
  "period": "all",
  "currency": "xrp",
  "convertCurrencies": ["eur", "usd"],
  "total": {
    "primary": 41933,
    "secondary": 25587
  },
  "sales": [
    {
      "nftokenID": "00081388A47691FB124F91B5FF0F5246AED2B5275385689F27ED727F000015E3",
      "acceptedAt": "1673931131",
      "acceptedLedgerIndex": "77169958",
      "acceptedTxHash": "C6F7492A4E58BC2FB6190F7081BBC96231E10ED463EDAB301DBDD650C97DD5FB",
      "acceptedAccount": "rpx9JThQ2y37FaGeeJP7PXDUVEXY3PHZSC",
      "seller": "rnVp1xV43N7SgqtjHWCSM6EcSUYs7yWNku",
      "buyer": "rJ1GJjNauEafyQWo1o5ZYDuciGPjx6yTGD",
      "amount": "40000000000",
      "broker": true,
      "marketplace": "xrp.cafe",
      "saleType": "secondary",
      "amountInConvertCurrencies": {
        "eur": "14213.6",
        "usd": "15399.6"
      },
      "nftoken": {
        "flags": {
          "burnable": false,
          "onlyXRP": false,
          "trustLine": false,
          "transferable": true
        },
        "issuer": "rEzbi191M5AjrucxXKZWbR5QeyfpbedBcV",
        "nftokenID": "00081388A47691FB124F91B5FF0F5246AED2B5275385689F27ED727F000015E3",
        "nftokenTaxon": 1,
        "transferFee": 5000,
        "sequence": 5603,
        "owner": "rJ1GJjNauEafyQWo1o5ZYDuciGPjx6yTGD",
        "uri": "516D654834744E4D4C655233756F3774755453357768416E66734B4A737A4D4C6B676F7A44664C78676863385571",
        "nftSerial": 5603,
        "issuedAt": 1667651282,
        "ownerChangedAt": 1673931131,
        "deletedAt": null,
        "url": "https://cloudflare-ipfs.com/ipfs/QmeH4tNMLeR3uo7tuTS5whAnfsKJszMLkgozDfLxghc8Uq",
        "metadata": {
          "name": "Bored Apes XRP Club #5611",
          "description": "The Bored Apes XRP Club is a collection of 10,000 unique Bored Ape NFTs living on the XRP ledger.",
          "image": "QmdYwvVtjNFKRqHEWPChdkfM24Z1i34FmmC4uAjDdnJ7NF/5611.png",
          "edition": "5611",
          "date": 1667650922062,
          "creator": "Bored Apes XRP Club",
          "artist": "Bored Apes XRP Club",
          "attributes": [
            {
              "trait_type": "Background",
              "value": "Punk Blue"
            },
            {
              "trait_type": "Fur",
              "value": "Grey"
            },
            {
              "trait_type": "Clothes",
              "value": "Cowboy"
            },
            {
              "trait_type": "Mouth",
              "value": "Rainbow"
            },
            {
              "trait_type": "Eyes",
              "value": "Blindfold"
            }
          ],
          "external_link": "https://x-apes.com/",
          "category": "Collectables",
          "collection": {
            "name": "Bored Apes XRP Club",
            "family": "art"
          }
        },
        "issuerDetails": {
          "username": "BoredApesXRP",
          "service": "Bored Apes XRP Club"
        },
        "ownerDetails": {
          "username": null,
          "service": null
        }
      },
      "sellerDetails": {
        "username": null,
        "service": null
      },
      "buyerDetails": {
        "username": null,
        "service": null
      },
      "acceptedAccountDetails": {
        "username": null,
        "service": "xrp.cafe"
      }
    }
  ],
  "total": {
    "primary": 78600,
    "secondary": 54396
  }
}
```

This endpoint retrieves a List of NFT Sales for specified parameters

### HTTP Request

`GET https://xrplexplorer.com/api/v2/nft-sales`

### Query Parameters

Parameter | Default | Description
--------- | ------- | -----------
list | null | `topSold` or `lastSold` (for the list of NFTs sales of the highest price or the latest sell timestamp)
convertCurrencies | null | (Only available on paid API plans) the list of currencies to convert amount to, splitted by comma, for example `xrp,usd` (40 fiat currencies available), the response will have an array `amountInConvertCurrencies`
sortCurrency | `xrp` | (Only available on paid API plans) one of the currencies from the `convertCurrencies` or `xrp` to sort the list by, for example: `usd` (optional)
currency | null | specify a currency to filter sales in a specific currency, for example `xrp` (should be specified if there are no `convertCurrencies` and `sortCurrency`)
currencyIssuer | null | if currency is specified and it is not 'xrp', then you must specify the currency issuer XRPL address (optional)
saleType | `all` | can be `primary` or `secondary` (optional, `primary` - the sales from the issuer address)
issuer | null | The address of the NFT issuer (optional)
buyer | null | (Only available on paid API plans) The address of the Buyer (optional)
seller | null | (Only available on paid API plans) The address of the Seller (optional)
taxon | null | Taxon for that Issuer (optional, will be ignored without an Issuer)
period | `all` | A time period, all time `all`, last 24h `day`, last 7 days `week`, last 30 days `month`, last 365 days `year` or a time period as timestamps from..to `1671490800000..1671663600000` or `2022-12-20T00:00:00.000Z..2022-12-22T00:00:00.000Z`
marketplace | null | You can specify a marketplace, to filter sales by a specific marketplace, for example `xrp.cafe`, the list of all marketplaces is <a href="https://xrplexplorer.com/nft-volumes?list=marketplaces&period=all&sale=all">here</a> (optional)
marker | null | The marker from the previous request, if you need a next page of NFTs

## NFT Volumes

```shell
curl "https://xrplexplorer.com/api/v2/nft-volumes?list=issuers&currency=xrp"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
```

```javascript
function getData(json) {
  console.log(json)
}
bithompRequest("https://xrplexplorer.com/api/v2/nft-volumes?list=issuers&currency=xrp", getData);
```

```php
$data = curl_bithomp("https://xrplexplorer.com/api/v2/nft-volumes?list=issuers&currency=xrp");
print $data;
```

> The above command returns JSON structured like this:

```json
{
  "list": "issuers",
  "period": "all",
  "saleType": "all",
  "marker": "753DF10F00000001",
  "volumes": [
    {
      "amount": "3183301846633",
      "sales": 1388,
      "issuer": "rpbjkoncKiv1LkPWShzZksqYPzKXmUhTW7",
      "issuerDetails": {
        "username": "XPUNKS",
        "service": "XPUNKS"
      },
      "buyers": 419,
      "tradedNfts": 1015,
      "totalOwners": 1872,
      "totalNfts": 6751,
      "floorPrice": {
        "open": {
          "amount": "2400000000"
        },
        "private": {
          "amount": "1150000000",
          "destination": "rpZqTPC8GvrSvEfFsUuHkmPCg29GdQuXhC",
          "destinationDetails": {
            "username": null,
            "service": "onXRP"
          }
        }
      }
    },
    {
      "amount": "1770531477817",
      "sales": 1582,
      "issuer": "rEzbi191M5AjrucxXKZWbR5QeyfpbedBcV",
      "issuerDetails": {
        "username": "BoredApesXRP",
        "service": "Bored Apes XRP Club"
      },
      "buyers": 368,
      "tradedNfts": 1358,
      "totalOwners": 1583,
      "totalNfts": 10064,
      "floorPrice": {
        "open": {
          "amount": "750000000"
        },
        "private": {
          "amount": "500000000",
          "destination": "rpx9JThQ2y37FaGeeJP7PXDUVEXY3PHZSC",
          "destinationDetails": {
            "username": null,
            "service": "xrp.cafe"
          }
        }
      }
    }
  ]
}
```

This endpoint retrieves NFT Sales Volumes for specified parameters

### HTTP Request

`GET https://xrplexplorer.com/api/v2/nft-volumes`

### Query Parameters

Parameter | Default | Description
--------- | ------- | -----------
list | null | `issuers`, `currencies`, `brokers` or `marketplaces` (If you are looking for `collections`, use <a href="#nft-volumes-extended">**NFT Volumes Extended**</a> endpoint)
currency | null | Must be specified for `issuers`, `brokers` and `marketplaces`, for example as `xrp`
currencyIssuer | null | if currency is specified and it is not 'xrp', then you must specify the currency issuer XRPL address (optional)
saleType | `all` | can be `primary` or `secondary` (optional, `primary` - the sales from the issuer address)
period | `all` | A time period, all time `all`, last 24h `day`, last 7 days `week`, last 30 days `month`, last 365 days `year`
floorPrice | false | (Only available on paid API plans) Returns `floorPrice` for `issuers`. The lowest VALID sell offers for an NFT from that collection, the lowest on the open market and the lowest on one of the identified market places.

## NFT Volumes Extended

```shell
curl "https://xrplexplorer.com/api/v2/nft-volumes-extended?list=collections&convertCurrencies=usd&sortCurrency=usd&floorPrice=true&statistics=true&period=week&saleType=secondary&assets=true"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
```

```javascript
function getData(json) {
  console.log(json)
}
bithompRequest("https://xrplexplorer.com/api/v2/nft-volumes-extended??list=collections&convertCurrencies=usd&sortCurrency=usd&floorPrice=true&statistics=true&period=week&saleType=secondary&assets=true", getData);
```

```php
$data = curl_bithomp("https://xrplexplorer.com/api/v2/nft-volumes-extended??list=collections&convertCurrencies=usd&sortCurrency=usd&floorPrice=true&statistics=true&period=week&saleType=secondary&assets=true");
print $data;
```

> The above command returns JSON structured like this:

```json
{
  "list": "collections",
  "period": "week",
  "convertCurrencies": [
    "usd"
  ],
  "sortCurrency": "usd",
  "statistics": true,
  "saleType": "secondary",
  "floorPrice": true,
  "marker": "7029546C00000001",
  "summary": {
    "all": {
        "volumes": [
            {
              "amount": "234369189287",
              "sales": 1440,
              "amountInConvertCurrencies": {
                "usd": "140788.52012833307"
              }
            },
            {
                "amount": {
                  "currency": "7853504543544152000000000000000000000000",
                  "issuer": "rh5jzTCdMRCVjQ7LT6zucjezC47KATkuvv",
                  "value": "14000"
                },
                "sales": 2,
                "amountInConvertCurrencies": {
                  "usd": "109.55480896211189029074672379403895104112"
                },
                "currencyDetails": {
                  "type": "hex",
                  "currencyCode": "7853504543544152000000000000000000000000",
                  "currency": "xSPECTAR"
                }
            }
        ],
        "sales": 1448,
        "volumesInConvertCurrencies": {
          "usd": "140913.35322087784071852423843308170024169712"
        }
    }
  },
  "lastAcceptedAt": 1724681821,
  "collections": [
    {
      "collection": "rPeRQQ8kaMej5b1E7tjkwFPm2xMFQofkdG:0",
      "sales": 170,
      "collectionDetails": {
        "collection": "rPeRQQ8kaMej5b1E7tjkwFPm2xMFQofkdG:0",
        "name": "Cryptoland Cryptopians",
        "family": "Avatars",
        "description": null,
        "assets": {
          "image": "https://cdn.bithomp.com/image/image_hash.png", 
          "preview": "https://cdn.bithomp.com/preview/preview_hash.png", 
          "thumbnail": "https://cdn.bithomp.com/thumbnail/thumbail_hash.png"
        },
        "image": "https://community-cryptoland-2.nyc3.cdn.digitaloceanspaces.com/upload/land/image/cryptoland01.jpg",
        "issuer": "rPeRQQ8kaMej5b1E7tjkwFPm2xMFQofkdG",
        "issuerDetails": {
          "address": "rPeRQQ8kaMej5b1E7tjkwFPm2xMFQofkdG",
          "username": null,
          "service": "CryptoLand"
        },
        "taxon": 0
      },
      "floorPrices": [
        {
          "open": {
            "amount": "860000000"
          },
          "private": {
            "amount": "469000000",
            "destination": "rpZqTPC8GvrSvEfFsUuHkmPCg29GdQuXhC",
            "destinationDetails": {
              "username": null,
              "service": "onXRP"
            }
          }
        }
      ],
      "statistics": {
        "buyers": 32,
        "tradedNfts": 165,
        "owners": 3715,
        "nfts": 29852
      },
      "volumesInConvertCurrencies": {
        "usd": "102166.04935985"
      },
      "volumes": [
        {
          "amount": "170175665000",
          "sales": 170,
          "amountInConvertCurrencies": {
            "usd": "102166.04935985"
          }
        }
      ]
    },
    {
        "collection": "rBeistBLWtUskF2YzzSwMSM2tgsK7ZD7ME:0",
        "sales": 13,
        "collectionDetails": {
            "collection": "rBeistBLWtUskF2YzzSwMSM2tgsK7ZD7ME:0",
            "name": null,
            "family": null,
            "description": null,
            "image": "QmTA3YRvEndxzENJC1GuNuSEZFCtGUkw2Lq91iQdA86yLj/1.png",
            "issuer": "rBeistBLWtUskF2YzzSwMSM2tgsK7ZD7ME",
            "issuerDetails": {
                "address": "rBeistBLWtUskF2YzzSwMSM2tgsK7ZD7ME",
                "username": "Zerpmon",
                "service": "Zerpmon"
            },
            "assets": {
              "image": "https://cdn.bithomp.com/image/image_hash.png", 
              "preview": "https://cdn.bithomp.com/preview/preview_hash.png", 
              "thumbnail": "https://cdn.bithomp.com/thumbnail/thumbail_hash.png",
            },
            "taxon": 0
        },
        "floorPrices": [
            {
                "open": null,
                "private": {
                    "amount": "325000000",
                    "destination": "rpx9JThQ2y37FaGeeJP7PXDUVEXY3PHZSC",
                    "destinationDetails": {
                        "username": "xrpcafe",
                        "service": "xrp.cafe"
                    }
                }
            }
        ],
        "statistics": {
            "buyers": 8,
            "tradedNfts": 13,
            "owners": 243,
            "nfts": 1807
        },
        "volumesInConvertCurrencies": {
            "usd": "5329.7998368721"
        },
        "volumes": [
            {
                "amount": "8769239310",
                "sales": 13,
                "amountInConvertCurrencies": {
                    "usd": "5329.7998368721"
                }
            }
        ]
    }
  ]
}
```

This endpoint retrieves Extended NFT Sales Volumes for specified parameters (Only available on paid API plans)

### HTTP Request

`GET https://xrplexplorer.com/api/v2/nft-volumes-extended`

### Query Parameters

Parameter | Default | Description
--------- | ------- | -----------
list | null | `collections`, `marketplaces`, `issuers`, `taxons`, `currencies` or `brokers`
issuer | null | An XRPL address or username of the NFT issuer, must be specified for list `taxons`, to receive separate volumes for each taxon of the issuer
currency | null | By default returns for all currencies, you can set any XRPL currency for example `xrp` (optional)
currencyIssuer | null | if currency is specified and it is not 'xrp', then you must specify the currency issuer XRPL address (optional)
convertCurrencies | null | the list of currencies to convert amounts and volumes to, splitted by comma, for example `xrp,usd` (40 fiat currencies available), the response will have `amountInConvertCurrencies` and `volumesInConvertCurrencies`
sortCurrency | `xrp` | one of the currencies from the `convertCurrencies` or `xrp` to sort the list by, for example: `usd` (optional)
saleType | `all` | can be `primary` or `secondary` (optional, `primary` - the sales from the issuer address)
period | `all` | A time period, all time `all`, last 24h `day`, last 7 days `week`, last 30 days `month`, last 365 days `year` or as timestamps from..to, examples: `1671490800000..1671663600000` or `2022-12-20T00:00:00.000Z..2022-12-22T00:00:00.000Z`
floorPrice | false | Returns `floorPrice` for `collections` and `issuers`. The lowest VALID sell offers for an NFT from that collection, the lowest on the open market and the lowest on one of the identified market places.
statistics | false | Returns `statistics` for `collections` and `issuers` and `taxons`. Which includes: `buyers` - current buyers count, `tradedNfts` - current count of traded NFTS, `owners` - current count of owners, `nfts` - current count of NFTs
marker | null | The marker from the previous request, if you need a next page
assets | false | (For Standard plan and hire) For list `collections` returns collection previews, `assets` with direct urls for image 700px x 700px, video 15s, preview 360px x 360px (image, otherwise video frame) and thumbnail 64px x 64px.

## NFT Minters

```shell
curl "https://xrplexplorer.com/api/v2/nft-marketplaces?period=week"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
```

```javascript
function getData(json) {
  console.log(json)
}
bithompRequest("https://xrplexplorer.com/api/v2/nft-marketplaces?period=week", getData);
```

```php
$data = curl_bithomp("https://xrplexplorer.com/api/v2/nft-marketplaces?period=week");
print $data;
```

> The above command returns JSON structured like this:

```json
{
  {
    "period": "all",
    "summary": {
      "minted": 1873080,
      "mintedAndBurned": 306224,
      "burned": 306224
    },
    "marketplaces": [
      {
        "marketplace": "unknown",
        "minted": 616658,
        "mintedAndBurned": 186176,
        "burned": 186176
      },
      {
        "marketplace": "onxrp.com",
        "minted": 299713,
        "mintedAndBurned": 22778,
        "burned": 22778
      },
      {
        "marketplace": "xmart.art",
        "minted": 261204,
        "mintedAndBurned": 16843,
        "burned": 16843
      },
      {
        "marketplace": "xrp.cafe",
        "minted": 186707,
        "mintedAndBurned": 3785,
        "burned": 3785
      },
      {
        "marketplace": "xrpnft.com",
        "minted": 153240,
        "mintedAndBurned": 49818,
        "burned": 49818
      },
      {
        "marketplace": "sologenic.org",
        "minted": 98900,
        "mintedAndBurned": 6210,
        "burned": 6210
      }
    ]
  }
}
```

This endpoint retrieves NFT minters on XRPL for a specified period of time

### HTTP Request

`GET https://xrplexplorer.com/api/v2/nft-marketplaces`

### Query Parameters

Parameter | Default | Description
--------- | ------- | -----------
period | `all` | A time period, all time all, last 24h day, last 7 days week, last 30 days month, last 365 days year or as timestamps from..to, examples: `1671490800000..1671663600000` or `2022-12-20T00:00:00.000Z..2022-12-22T00:00:00.000Z`

## NFT Mint Chart

```shell
curl "https://xrplexplorer.com/api/v2/nft-chart?span=day&period=month"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
```

```javascript
function getData(json) {
  console.log(json)
}
bithompRequest("https://xrplexplorer.com/api/v2/nft-chart?span=day&period=month", getData);
```

```php
$data = curl_bithomp("https://xrplexplorer.com/api/v2/nft-chart?span=day&period=month");
print $data;
```

> The above command returns JSON structured like this:

```json
{
  "span": "day",
  "period": "month",
  "chart": [
    {
      "time": "2024-01-19T23:59:59.999Z",
      "issues": 11969
    },
    {
      "time": "2024-01-20T23:59:59.999Z",
      "issues": 2173
    }
  ]
}
```

This endpoint retrieves NFT mints count for a specified period of time, with a specified span (available only on the Standard plan and higher)

### HTTP Request

`GET https://xrplexplorer.com/api/v2/nft-chart`

### Query Parameters

Parameter | Default | Description
--------- | ------- | -----------
period | `all` | A time period, all time `all`, last hour `hour`, last 24h `day`, last 7 days `week`, last 30 days `month`, last 365 days `year` or as timestamps from..to, examples: `1671490800000..1671663600000` or `2022-12-20T00:00:00.000Z..2022-12-22T00:00:00.000Z`
span | null | A time span for the chart, can be `minute`, `hour`, `day`, `month`, `year`, not all spans are available for large periods, for a period `hour` you can have `minute`, for periods up to 60 hours, you can have `hour`, `day`, `month`, for up to 60 days - `day`, `month`.

## NFT Sales Chart

```shell
curl "https://xrplexplorer.com/api/v2/nft-sales-chart?span=day&period=month&convertCurrencies=usd&saleType=secondary"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
```

```javascript
function getData(json) {
  console.log(json)
}
bithompRequest("https://xrplexplorer.com/api/v2/nft-sales-chart?span=day&period=month&convertCurrencies=usd&saleType=secondary", getData);
```

```php
$data = curl_bithomp("https://xrplexplorer.com/api/v2/nft-sales-chart?span=day&period=month&convertCurrencies=usd&saleType=secondary");
print $data;
```

> The above command returns JSON structured like this:

```json
{
  "span": "day",
  "saleType": "secondary",
  "period": "month",
  "convertCurrencies": [
    "usd"
  ],
  "chart": [
    {
      "time": "2024-01-20T23:59:59.999Z",
      "sales": 251,
      "amountInNativeCurrency": "12595.349685",
      "amountInConvertCurrencies": {
        "usd": "6896.94474652027"
      }
    },
    {
      "time": "2024-01-21T23:59:59.999Z",
      "sales": 405,
      "amountInNativeCurrency": "19519.066439",
      "amountInConvertCurrencies": {
        "usd": "10764.85431987046"
      }
    }
  ]
}
```

This endpoint retrieves NFT Sales Volumes Chart data for a specified period of time, with a specified span (available only on the Standard plan and higher)

### HTTP Request

`GET https://xrplexplorer.com/api/v2/nft-sales-chart`

### Query Parameters

Parameter | Default | Description
--------- | ------- | -----------
period | `all` | A time period, all time `all`, last hour `hour`, last 24h `day`, last 7 days `week`, last 30 days `month`, last 365 days `year` or as timestamps from..to, examples: `1671490800000..1671663600000` or `2022-12-20T00:00:00.000Z..2022-12-22T00:00:00.000Z`
span | null | A time span for the chart, can be `minute`, `hour`, `day`, `month`, `year`, not all spans are available for large periods, for a period `hour` you can have `minute`, for periods up to 60 hours, you can have `hour`, `day`, `month`, for up to 60 days - `day`, `month`.
issuer | null | An address or username of the NFT issuer (optional, if you want to get data for a specific issuer)
taxon | null | Taxon for that `issuer` (optional, will be ignored without an `issuer`)
currency | null | By default returns for all currencies, you can set any currency for example `xrp` (optional)
currencyIssuer | null | if currency is specified and it is not 'xrp', then you must specify the currency issuer address (optional)
convertCurrencies | null | the list of currencies to convert amounts and volumes to, splitted by comma, for example `xrp,usd` (40 fiat currencies available), the response will have `amountInConvertCurrencies`
saleType | `all` | can be `primary` or `secondary` (optional, `primary` - the sales from the issuer address)

## NFT Crawler (Last update)

```shell
curl "https://xrplexplorer.com/api/v2/statistics/nftokens/crawler"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
```

```javascript
function getData(json) {
  console.log(json)
}
bithompRequest("https://xrplexplorer.com/api/v2/statistics/nftokens/crawler", getData);
```

```php
$data = curl_bithomp("https://xrplexplorer.com/api/v2/statistics/nftokens/crawler");
print $data;
```

> The above command returns JSON structured like this:

```json
{
  "ledgerIndex": 82078753,
  "ledgerTime": 1692949961
}
```

This endpoint returns the last ledger which was crawled by our NFT crawler.

### HTTP Request

`GET https://xrplexplorer.com/api/v2/statistics/nftokens/crawler`

### Response Format

Field | Value | Description
----- | ----- | -----------
ledgerIndex | Integer | The last crawled ledger index.
ledgerTime | Integer	| UNIX timestamp of the last crawled ledger.

# Services

## Get services

```shell
curl "https://xrplexplorer.com/api/v2/services"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
```

```javascript
function getData(json) {
  console.log(json)
}
bithompRequest("https://xrplexplorer.com/api/v2/services", getData);
```

```php
$data = curl_bithomp("https://xrplexplorer.com/api/v2/services");
print $data;
```

> The above command returns JSON structured like this:

```json
{
  "total": 467,
  "lastUpdate": 1579417546,
  "services": [
    {
      "name": "Bithomp",
      "domain": "bithomp.com",
      "socialAccounts": {
        "twitter": "bithomp",
        "youtube": "channel/UCTvrMnG-Tpqi5FN9zO7GcWw",
        "instagram": "bithomp"
      },
      "addresses": [
        {
          "address": "rsuUjfWxrACCAwGQDsNeZUhpzXf1n1NK5Z"
        },
        {
          "address": "rnk3N5hHnLS6nWncNh2R4D2ATiuEicjxXo"
        },
        {
          "address": "rhUYLd2aUiUVYkBZYwTc5RYgCAbNHAwkeZ",
          "name": "Bithomp activation"
        },
        {
          "address": "rBithomp3UNknnjo8HKNfyS5MN4kdPTZpW"
        },
        {
          "address": "rBithomp4vj5E2kUebx7tVwipBueg55XxS",
          "name": "Bithomp donations"
        },
        {
          "address": "rBithompKtixswR4bknJqYaxnm7yRhGYFq",
          "name": "Bithomp username"
        },
        {
          "address": "rKontEGtDju5MCEJCwtrvTWQQqVAw5juXe",
          "name": "Bithomp validator"
        }
      ]
    },
    {

    }
  ]
}
```

This endpoint retrieves a list of identified services.

### HTTP Request

`GET https://xrplexplorer.com/api/v2/services`

### Response Format

Field | Value | Description
----- | ----- | -----------
total	| Integer	| The amount of identified services.
lastUpdate | Integer | UNIX timestamp of the last data update.
services | Array | Array of services.
services[].name | String | A name of a service.
services[].domain | String | A domain of a service.
services[].socialAccounts | Object | An object with social account of a service. (twitter, youtube, instagram, facebook, medium, telegram, linkedin, reddit)
services[].addresses | Array | An array of service's addresses. Each address can have it's own (more specific) name, domain, socialAccounts.

<aside class="notice">
Before downloading the whole list again you can check if it was updated here: <a href="#services-last-update">Get status: Services</a>
</aside>

## Addresses from Services

```shell
curl "https://xrplexplorer.com/api/v2/services/addresses"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
```

```javascript
function getData(json) {
  console.log(json)
}
bithompRequest("https://xrplexplorer.com/api/v2/services/addresses", getData);
```

```php
$data = curl_bithomp("https://xrplexplorer.com/api/v2/services/addresses");
print $data;
```

> The above command returns JSON structured like this:

```json
{
  "total": 1824,
  "lastUpdate": 1579417546,
  "addresses": {
    "rPEPPER7kfTD9w2To4CQk6UCfuHM9c6GDY": {
      "name": "XRP Tip Bot",
      "domain": "xrptipbot.com",
      "socialAccounts": {
        "twitter": "xrptipbot"
      }
    },
    "r3kmLJN5D28dHuH8vZNUZpMC43pEHpaocV": {
      "name": "Ripple",
      "domain": "ripple.com",
      "socialAccounts": {
        "twitter": "Ripple",
        "facebook": "ripplepay",
        "linkedin": "ripple-labs"
      }
    },
  }
}
```

This endpoint retrieves a list of all identified service addresses.

### HTTP Request

`GET https://xrplexplorer.com/api/v2/services/addresses`

### Response Format

Field | Value | Description
----- | ----- | -----------
total	| Integer	| The amount of identified addresses.
lastUpdate | Integer | UNIX timestamp of the last data update.
addresses | Object | Object with identified addresses.
addresses.ADDRESS.name | String | A name of the ADDRESS’s service.
addresses.ADDRESS.domain | String | A domain of the ADDRESS’s service.
addresses.ADDRESS.socialAccounts | Object | An object with social account of the ADDRESS’s service. (twitter, youtube, instagram, facebook, medium, telegram, linkedin, reddit)

<aside class="notice">
Before downloading the whole list again you can check if it was updated here: <a href="#services-last-update">Get status: Services</a>
</aside>

## Status (Last update)

```shell
curl "https://xrplexplorer.com/api/v2/services/lastUpdate"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
```

```javascript
function getData(json) {
  console.log(json)
}
bithompRequest("https://xrplexplorer.com/api/v2/services/lastUpdate", getData);
```

```php
$data = curl_bithomp("https://xrplexplorer.com/api/v2/services/lastUpdate");
print $data;
```

> The above command returns JSON structured like this:

```json
{
  "lastUpdate": 1579527766,
  "totalServices": 475,
  "totalAddresses": 1832
}
```

This endpoint returns a timestamp of last DB update for services/addresses.

### HTTP Request

`GET https://xrplexplorer.com/api/v2/services/lastUpdate`

### Response Format

Field | Value | Description
----- | ----- | -----------
lastUpdate | Integer	| UNIX timestamp of the last data update.
totalServices | Integer | The amount of identified services.
totalAddresses | Integer | The amount of identified addresses.

# Address

## Get information for an address

```shell
curl "https://xrplexplorer.com/api/v2/address/rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B?username=true&service=true&verifiedDomain=true&inception=true&ledgerInfo=true"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
```

```javascript
function getAddressInfo(json) {
  console.log(json)
}
bithompRequest("https://xrplexplorer.com/api/v2/address/rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B?username=true&service=true&verifiedDomain=true&inception=true&ledgerInfo=true", getAddressInfo);
```

```php
$addressInfo = curl_bithomp("https://xrplexplorer.com/api/v2/address/rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B?username=true&service=true&verifiedDomain=true&inception=true&ledgerInfo=true");
print $addressInfo;
```

> The above command returns JSON structured like this:

```json
{
  "address": "rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B",
  "xAddress": "X7WZKEeNVS2p9Tire9DtNFkzWBZbFtJHWxDjN9fCrBGqVA4",
  "inception": 1361216760,
  "initialBalance": 1500,
  "genesis": false,
  "ledgerInfo": {
    "activated": true,
    "error": null,
    "ledger": 69617915,
    "ledgerTimestamp": 1645995600,
    "balance": "6511036080064",
    "flags": {
      "passwordSpent": false,
      "requireDestTag": true,
      "requireAuth": false,
      "depositAuth": false,
      "disallowXRP": true,
      "disableMaster": false,
      "noFreeze": false,
      "globalFreeze": false,
      "defaultRipple": true
    },
    "ownerCount": 387,
    "previousTxnID": "2B0A02B899DC0D384AC14E0AB6DF8E32DBB9941D06696233A6BF03C0EB577027",
    "previousTxnLgrSeq": 69617676,
    "sequence": 4692,
    "accountTxnID": null,
    "mintedTokens": 1,
    "burnedTokens": 12,
    "regularKey": null,
    "ticketCount": 5,
    "signerList": {
      "previousTxnID": "965730F660A808927B7A850F0408FF6532BA385641FC1DC67E2907F41A9E7B75",
      "previousTxnLgrSeq": 62412856,
      "signerQuorum": 2,
      "flags": {
        "oneOwnerCount": true
      },
      "signerEntries": [
        {
          "account": "re3LGjhrCvthtWWwrfKbVJjXN9PYDeQDJ",
          "signerWeight": 1
        },
        {
          "account": "rkPA5RwLVPnJgpcsrzYvHwx1HVfDb6zD3",
          "signerWeight": 1
        },
        {
          "account": "rpcL6T32dYb6FDgdm4CnC1DZQSoMvvkLRd",
          "signerWeight": 1
        }
      ]
    },
    "domain": "bitstamp.net",
    "emailHash": "5b33b93c7ffe384d53450fc666bb11fb",
    "messageKey": null,
    "tickSize": null,
    "transferRate": 1.002,
    "blackholed": false
  },
  "service": {
    "name": "Bitstamp",
    "domain": "bitstamp.net",
    "socialAccounts": {
      "twitter": "Bitstamp",
      "facebook": "Bitstamp",
      "youtube": null,
      "instagram": null,
      "linkedin": null,
      "reddit": null,
      "medium": null,
      "telegram": null
    }
  },
  "username": "Bitstamp",
  "verifiedDomain": null
}
```

This endpoint retrieves information for a requested XRPL address.

### HTTP Request

`GET https://xrplexplorer.com/api/v2/address/<address>`

### URL Parameters

Parameter | Description
--------- | -----------
address | The XRPL address, can be old r-address or a new X-address

### Query Parameters

Parameter | Default | Description
--------- | ------- | -----------
service | false | If set to true, the result will also include Service details.
username | false | If set to true, the result will also include a `username` (rippletrade or bithomp).
payString | false| If set to true, the result will also include a bithomp `payString` for that address.
verifiedDomain | false | If set true, the result will include a <a href="https://coil.com/p/ihomp/XRP-Ledger-domain-verification/uJKPWh_4C">`verifiedDomain`</a> if such exists.
hashicon | false | If set true, the result will include `hashicon` which can be used in img's src="" or in css, as background's url. (The icon is the same for x-address and r-address, such hashicons used in Xumm and Bithomp.)
parent | false | If set to true, the result will include the same info for a parent account. Also it will add to the root object: `genesis`, `initialBalance`, `inception`
nickname | false | If set to true, the result will include an old `nickname` from bitcointalk forum.
flare | false | if set to true, the result will include `flare: {spark, songbird, address}`.
inception | false | if set to true, the result will include: `genesis`, `initialBalance`, `inception`.
ledgerInfo | false | if set to true, the result will include `ledgerInfo` object. (Note: A fee to use this parameter might be introduced in the feature)
ledgerTimestamp | null | ISO timestamp or unix timestamp (if set the request will return `ledgerInfo` data for that timestamp)

<aside class="notice">
Exclude unnecessary parameters to make your request faster.
</aside>

# Validator

## Get wallet

```shell
curl "https://xrplexplorer.com/api/v2/validator/nHB8QMKGt9VB4Vg71VszjBVQnDW3v3QudM4DwFaJfy96bj4Pv9fA"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
```

```javascript
function getValidatorAddress(json) {
  console.log(json.publicKey + " validator's XRPL address: ", json.address);
}
bithompRequest("https://xrplexplorer.com/api/v2/validator/nHB8QMKGt9VB4Vg71VszjBVQnDW3v3QudM4DwFaJfy96bj4Pv9fA", getValidatorAddress);
```

```php
$validatorAddress = curl_bithomp("https://xrplexplorer.com/api/v2/validator/nHB8QMKGt9VB4Vg71VszjBVQnDW3v3QudM4DwFaJfy96bj4Pv9fA");
print $validatorAddress;
```

> The above command returns JSON structured like this:

```json
{
  "publicKey": "nHB8QMKGt9VB4Vg71VszjBVQnDW3v3QudM4DwFaJfy96bj4Pv9fA",
  "address": "rKontEGtDju5MCEJCwtrvTWQQqVAw5juXe"
}
```

This endpoint retrieves an address of a specific validator
<a href="https://github.com/codetsunami/xrpl-tools/blob/master/validator-address-tool/vatool.js">computed from the validator public key</a>

### HTTP Request

`GET https://xrplexplorer.com/api/v2/validator/<validatorPublicKey>`

### URL Parameters

Parameter | Description
--------- | -----------
validatorPublicKey | The public key of the validator to retrieve

# Currency (HEX / XLS-14 NFT)

## Currency

```shell
curl "https://xrplexplorer.com/api/v2/currency/02C7004B041A91880000526964776F726C643836"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
```

```javascript
function getData(json) {
  console.log(json)
}
bithompRequest("https://xrplexplorer.com/api/v2/currency/02C7004B041A91880000526964776F726C643836", getData);
```

```php
$data = curl_bithomp("https://xrplexplorer.com/api/v2/currency/02C7004B041A91880000526964776F726C643836");
print $data;
```

> The above command returns JSON structured like this:

```json
{
  "type": "nft",
  "currencyCode": "02C7004B041A91880000526964776F726C643836",
  "currency": "Ridworld86",
  "cti": 56013842556817800,
  "ctiLedger": 68850056,
  "ctiTxIndex": 75,
  "ctiValid": true,
  "timestamp": 1641544270,
  "ctiTx": {
    "hash": "79C0E05CB9FC2B74F0B9716C15A6E2F924DBC8658931FD96AC8B158308A9886C",
    "type": "payment",
    "account": "rGpmRmU3Q5gyhhyWLWugkPX6SA8FyqXyE5",
    "counterparty": null,
    "destination": "r4VzEm7Jbgg3QkPBgMscoppz6JuzK2Jkbd",
    "memos": [
      {
        "Memo": {
          "MemoData": "526964776F726C6438362E205261726974793A2052617265204C6567656E642E20416D6F756E74206D696E7465643A2035383920756E6974732E20526964776F726C64C2AE20436F6C6C65637469626C65204E465420436172642047616D652E20496C6C7573747261746F723A205765622041727469737469632E",
          "MemoFormat": "746578742F706C61696E",
          "MemoType": "4465736372697074696F6E"
        }
      },
      {
        "Memo": {
          "MemoData": "456E69676D61",
          "MemoFormat": "746578742F706C61696E",
          "MemoType": "417574686F72"
        }
      },
      {
        "Memo": {
          "MemoData": "697066733A2F2F626166796265696779347869796C347A7062376C667474797832356E7A796E6F32647369766A777378657337376467336936356767796666637665",
          "MemoFormat": "746578742F757269",
          "MemoType": "5072696D617279557269"
        }
      }
    ]
  },
  "nft": {
    "type": "xls14",
    "description": "Ridworld86. Rarity: Rare Legend. Amount minted: 589 units. Ridworld® Collectible NFT Card Game. Illustrator: Web Artistic.",
    "author": "Enigma",
    "primaryUri": "ipfs://bafybeigy4xiyl4zpb7lfttyx25nzyno2dsivjwsxes77dg3i65ggyffcve",
    "backupUri": null,
    "image": null,
    "data": null
  }
}
```

This endpoint retrieves information for a requested currency (HEX or XLS-14 NFT).

### HTTP Request

`GET https://xrplexplorer.com/api/v2/currency/<currency>`

### URL Parameters

Parameter | Description
--------- | -----------
currency  | A currency (HEX or XLS-14 NFT)

<aside class="notice">
You can retrieve information for MANY currencies in one request:
<a href="#currencies-hex-or-xls-14-nfts">Currencies (HEX or XLS-14 NFT)</a>
</aside>

## Currencies

```shell
curl "https://xrplexplorer.com/api/v2/currencies/?currencyList=02090001014A4E43454C53436F6E746573743031,02C7004B041A91880000526964776F726C643836,534F4C4F00000000000000000000000000000000"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
```

```javascript
function getData(json) {
  console.log(json)
}
bithompRequest("https://xrplexplorer.com/api/v2/currencies/?currencyList=02090001014A4E43454C53436F6E746573743031,02C7004B041A91880000526964776F726C643836,534F4C4F00000000000000000000000000000000", getData);
```

```php
$data = curl_bithomp("https://xrplexplorer.com/api/v2/currencies/?currencyList=02090001014A4E43454C53436F6E746573743031,02C7004B041A91880000526964776F726C643836,534F4C4F00000000000000000000000000000000");
print $data;
```

> The above command returns JSON structured like this:

```json
{
  "02090001014A4E43454C53436F6E746573743031": {
    "type": "nft",
    "currencyCode": "02090001014A4E43454C53436F6E746573743031",
    "currency": "ELSContest01",
    "cti": 2533279107010115,
    "ctiLedger": 21646915,
    "ctiTxIndex": 1,
    "ctiValid": false,
    "timestamp": 1465177060,
    "ctiTx": {
      "type": "orderCancellation",
      "account": "r4aqu2zbAdX2QQ9bdeuGwifUMhtEeqx3pY",
      "hash": "D06F5941FD8D1DFAD1A0E4B2BE227C19C0C49B6E6257B846A507E69F9AFB10AA"
    },
    "nft": {
      "type": "xls14"
    }
  },
  "02C7004B041A91880000526964776F726C643836": {
    "type": "nft",
    "currencyCode": "02C7004B041A91880000526964776F726C643836",
    "currency": "Ridworld86",
    "cti": 56013842556817800,
    "ctiLedger": 68850056,
    "ctiTxIndex": 75,
    "ctiValid": true,
    "timestamp": 1641544270,
    "ctiTx": {
      "hash": "79C0E05CB9FC2B74F0B9716C15A6E2F924DBC8658931FD96AC8B158308A9886C",
      "type": "payment",
      "account": "rGpmRmU3Q5gyhhyWLWugkPX6SA8FyqXyE5",
      "counterparty": null,
      "destination": "r4VzEm7Jbgg3QkPBgMscoppz6JuzK2Jkbd",
      "memos": [
        {
          "Memo": {
            "MemoData": "526964776F726C6438362E205261726974793A2052617265204C6567656E642E20416D6F756E74206D696E7465643A2035383920756E6974732E20526964776F726C64C2AE20436F6C6C65637469626C65204E465420436172642047616D652E20496C6C7573747261746F723A205765622041727469737469632E",
            "MemoFormat": "746578742F706C61696E",
            "MemoType": "4465736372697074696F6E"
          }
        },
        {
          "Memo": {
            "MemoData": "456E69676D61",
            "MemoFormat": "746578742F706C61696E",
            "MemoType": "417574686F72"
          }
        },
        {
          "Memo": {
            "MemoData": "697066733A2F2F626166796265696779347869796C347A7062376C667474797832356E7A796E6F32647369766A777378657337376467336936356767796666637665",
            "MemoFormat": "746578742F757269",
            "MemoType": "5072696D617279557269"
          }
        }
      ]
    },
    "nft": {
      "type": "xls14",
      "description": "Ridworld86. Rarity: Rare Legend. Amount minted: 589 units. Ridworld® Collectible NFT Card Game. Illustrator: Web Artistic.",
      "author": "Enigma",
      "primaryUri": "ipfs://bafybeigy4xiyl4zpb7lfttyx25nzyno2dsivjwsxes77dg3i65ggyffcve",
      "backupUri": null,
      "image": null,
      "data": null
    }
  },
  "534F4C4F00000000000000000000000000000000": {
    "type": "hex",
    "currencyCode": "534F4C4F00000000000000000000000000000000",
    "currency": "SOLO"
  }
}
```

This endpoint retrieves information for a requested currencies (HEX or XLS-14 NFT).

### HTTP Request

`GET https://xrplexplorer.com/api/v2/currencies`

### Query Parameters

Parameter     | Description
------------- | -----------
currencyList  | A list of currencies separated by comma (HEX or XLS-14 NFT)

# Transaction

## Tx Details

```shell
curl "https://xrplexplorer.com/api/v2/transaction/277EE666435B4A5AB50FA7391E9D202D74EB29AEE56BA8E9D82E631BFD31F41F"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
```

```javascript
function printData(json) {
  console.log(JSON.stringify(json, undefined, 2));
}
bithompRequest("https://xrplexplorer.com/api/v2/transaction/277EE666435B4A5AB50FA7391E9D202D74EB29AEE56BA8E9D82E631BFD31F41F", printData);
```

```php
$data = curl_bithomp("https://xrplexplorer.com/api/v2/transaction/277EE666435B4A5AB50FA7391E9D202D74EB29AEE56BA8E9D82E631BFD31F41F");
print $data;
```

> The above command returns JSON structured like this:

```json
{
  "type": "ammWithdraw",
  "address": "raxq4QbVoAxFkWzggx54ZPjN98oLoqQF7J",
  "sequence": 86780513,
  "id": "277EE666435B4A5AB50FA7391E9D202D74EB29AEE56BA8E9D82E631BFD31F41F",
  "ctid": "C547FB7700000000",
  "specification": {
    "source": {
      "address": "raxq4QbVoAxFkWzggx54ZPjN98oLoqQF7J",
      "tag": 24546893
    },
    "asset": {
      "currency": "4252414400000000000000000000000000000000",
      "counterparty": "rBRAD8ntFu3yFhpoo7uLjj4EbVi2UQ1EMR"
    },
    "asset2": {
      "currency": "XRP"
    },
    "flags": {
      "lpToken": false,
      "withdrawAll": true,
      "oneAssetWithdrawAll": false,
      "singleAsset": false,
      "twoAsset": false,
      "oneAssetLPToken": false,
      "limitLPToken": false
    }
  },
  "outcome": {
    "result": "tesSUCCESS",
    "timestamp": "2024-06-10T23:26:32.000Z",
    "fee": "0.000012",
    "balanceChanges": {
      "rNkJATb3PcVggEUcntMwt6b3662M1p44u3": [
        {
          "currency": "XRP",
          "value": "-6.405052"
        },
        {
          "counterparty": "raxq4QbVoAxFkWzggx54ZPjN98oLoqQF7J",
          "currency": "0369BC054184BA4C655E4197B570C2AA25AFA8E4",
          "value": "3975740.88133"
        },
        {
          "counterparty": "rBRAD8ntFu3yFhpoo7uLjj4EbVi2UQ1EMR",
          "currency": "4252414400000000000000000000000000000000",
          "value": "-6537178.8337"
        }
      ],
      "raxq4QbVoAxFkWzggx54ZPjN98oLoqQF7J": [
        {
          "counterparty": "rNkJATb3PcVggEUcntMwt6b3662M1p44u3",
          "currency": "0369BC054184BA4C655E4197B570C2AA25AFA8E4",
          "value": "-3975740.88133"
        },
        {
          "counterparty": "rBRAD8ntFu3yFhpoo7uLjj4EbVi2UQ1EMR",
          "currency": "4252414400000000000000000000000000000000",
          "value": "6537178.833695069"
        },
        {
          "currency": "XRP",
          "value": "6.40504"
        }
      ],
      "rBRAD8ntFu3yFhpoo7uLjj4EbVi2UQ1EMR": [
        {
          "counterparty": "raxq4QbVoAxFkWzggx54ZPjN98oLoqQF7J",
          "currency": "4252414400000000000000000000000000000000",
          "value": "-6537178.833695069"
        },
        {
          "counterparty": "rNkJATb3PcVggEUcntMwt6b3662M1p44u3",
          "currency": "4252414400000000000000000000000000000000",
          "value": "6537178.8337"
        }
      ]
    },
    "ammChanges": {
      "status": "modified",
      "ammID": "A513513E3A227FE3A7920740EC8A336C68A166881930E455E16F28EED794D867",
      "account": "rNkJATb3PcVggEUcntMwt6b3662M1p44u3",
      "asset": {
        "currency": "XRP"
      },
      "asset2": {
        "currency": "4252414400000000000000000000000000000000",
        "counterparty": "rBRAD8ntFu3yFhpoo7uLjj4EbVi2UQ1EMR"
      },
      "auctionSlot": {
        "account": "rEPR5XZjXDUMy65K5qUMgGFVqqo8CiA8AU",
        "discountedFee": 39,
        "expiration": 1712919252,
        "price": {
          "currency": "0369BC054184BA4C655E4197B570C2AA25AFA8E4",
          "issuer": "rNkJATb3PcVggEUcntMwt6b3662M1p44u3",
          "value": "10000000"
        }
      },
      "lpTokenBalance": {
        "currency": "0369BC054184BA4C655E4197B570C2AA25AFA8E4",
        "value": "27151566861.22734",
        "counterparty": "rNkJATb3PcVggEUcntMwt6b3662M1p44u3"
      },
      "tradingFee": 392,
      "ownerNode": "0",
      "voteSlots": [
        {
          "account": "rs4HULUYNcbwCmH4KokAk7pus6wRpgtfmg",
          "tradingFee": 750,
          "voteWeight": 6411
        },
        {
          "account": "r9eVykdjG58vsFk99GQozRbE7LTovFG6Py",
          "tradingFee": 1000,
          "voteWeight": 636
        },
        {
          "account": "rH9ZRJDe1dbrJY78gXpZWbhkqz94byf2Ab",
          "tradingFee": 8,
          "voteWeight": 9129
        },
        {
          "account": "rwQbT25TA3NEvTAHFxmfEZkMUfQ7tYJ7T6",
          "tradingFee": 330,
          "voteWeight": 0
        },
        {
          "account": "rpNmRsusXxqJoaDny4B3nVTqwkE1xDEDGt",
          "tradingFee": 1000,
          "voteWeight": 531
        },
        {
          "account": "r9dRhoGsmBStn3qdTq3mYychrFYneR6wn5",
          "tradingFee": 850,
          "voteWeight": 1099
        },
        {
          "account": "rp6Ak4Z5X6HcQZpuEWHJ7esuXHcwraFFAU",
          "tradingFee": 375,
          "voteWeight": 365
        }
      ],
      "lpTokenBalanceChange": {
        "currency": "0369BC054184BA4C655E4197B570C2AA25AFA8E4",
        "counterparty": "rNkJATb3PcVggEUcntMwt6b3662M1p44u3",
        "value": "-3975740.88133"
      }
    },
    "ledgerVersion": 88603511,
    "indexInLedger": 0
  },
  "rawTransaction": "{\"Account\":\"raxq4QbVoAxFkWzggx54ZPjN98oLoqQF7J\",\"Asset\":{\"currency\":\"4252414400000000000000000000000000000000\",\"issuer\":\"rBRAD8ntFu3yFhpoo7uLjj4EbVi2UQ1EMR\"},\"Asset2\":{\"currency\":\"XRP\"},\"Fee\":\"12\",\"Flags\":131072,\"LastLedgerSequence\":88603519,\"Sequence\":86780513,\"SigningPubKey\":\"03C351BAA176A52F2533C78F32FFE9C0F8C2797465752B1814BC80C0CA5C478262\",\"SourceTag\":24546893,\"TransactionType\":\"AMMWithdraw\",\"TxnSignature\":\"304402207CA0A9B2C82298727D8B988592B5CBBB8F7FD9F59A7F085E08A6BD7C8F6821D50220750024405B3BA37A810FEDE5F97667F20E2042D5705869D23CFEC9DBA3F54D51\",\"hash\":\"277EE666435B4A5AB50FA7391E9D202D74EB29AEE56BA8E9D82E631BFD31F41F\",\"ctid\":\"C547FB7700000000\",\"meta\":{\"AffectedNodes\":[{\"ModifiedNode\":{\"FinalFields\":{\"AMMID\":\"A513513E3A227FE3A7920740EC8A336C68A166881930E455E16F28EED794D867\",\"Account\":\"rNkJATb3PcVggEUcntMwt6b3662M1p44u3\",\"Balance\":\"43742087143\",\"Flags\":26214400,\"OwnerCount\":1,\"Sequence\":86795583},\"LedgerEntryType\":\"AccountRoot\",\"LedgerIndex\":\"38C2F23C15911AEB239A8FD27DC1022F6CFEAC5B58AAE825EF738CBB1A1A244D\",\"PreviousFields\":{\"Balance\":\"43748492195\"},\"PreviousTxnID\":\"1DF6D18DC3BE6C63ABAF2236A9B68E807A7E13C0EEF4F82886C8912B72815EB4\",\"PreviousTxnLgrSeq\":88602916}},{\"ModifiedNode\":{\"FinalFields\":{\"Balance\":{\"currency\":\"0369BC054184BA4C655E4197B570C2AA25AFA8E4\",\"issuer\":\"rrrrrrrrrrrrrrrrrrrrBZbvji\",\"value\":\"0\"},\"Flags\":1114112,\"HighLimit\":{\"currency\":\"0369BC054184BA4C655E4197B570C2AA25AFA8E4\",\"issuer\":\"rNkJATb3PcVggEUcntMwt6b3662M1p44u3\",\"value\":\"0\"},\"HighNode\":\"6\",\"LowLimit\":{\"currency\":\"0369BC054184BA4C655E4197B570C2AA25AFA8E4\",\"issuer\":\"raxq4QbVoAxFkWzggx54ZPjN98oLoqQF7J\",\"value\":\"1000000000\"},\"LowNode\":\"0\"},\"LedgerEntryType\":\"RippleState\",\"LedgerIndex\":\"8DAFD598632DB249B645EA43E94B5339966B2FB5CEDA9158276498F86141645E\",\"PreviousFields\":{\"Balance\":{\"currency\":\"0369BC054184BA4C655E4197B570C2AA25AFA8E4\",\"issuer\":\"rrrrrrrrrrrrrrrrrrrrBZbvji\",\"value\":\"3975740.88133\"}},\"PreviousTxnID\":\"634B26D4349919AF97BEF1215AA131AB07DA3B697F6F843C51A3FFD4ADF5EBB4\",\"PreviousTxnLgrSeq\":88533296}},{\"ModifiedNode\":{\"FinalFields\":{\"Balance\":{\"currency\":\"4252414400000000000000000000000000000000\",\"issuer\":\"rrrrrrrrrrrrrrrrrrrrBZbvji\",\"value\":\"6537179.10522535\"},\"Flags\":1114112,\"HighLimit\":{\"currency\":\"4252414400000000000000000000000000000000\",\"issuer\":\"rBRAD8ntFu3yFhpoo7uLjj4EbVi2UQ1EMR\",\"value\":\"0\"},\"HighNode\":\"194\",\"LowLimit\":{\"currency\":\"4252414400000000000000000000000000000000\",\"issuer\":\"raxq4QbVoAxFkWzggx54ZPjN98oLoqQF7J\",\"value\":\"5890000000000345e-4\"},\"LowNode\":\"0\"},\"LedgerEntryType\":\"RippleState\",\"LedgerIndex\":\"9439F82DAA1AD223BBF596F6625A503BF5868C8F1FB8867CC532B032A7383240\",\"PreviousFields\":{\"Balance\":{\"currency\":\"4252414400000000000000000000000000000000\",\"issuer\":\"rrrrrrrrrrrrrrrrrrrrBZbvji\",\"value\":\"0.271530281\"}},\"PreviousTxnID\":\"8E90DE5C53B201A0A1F4D2ED34D4DA26A30044DFDF1D885E2B53F6F4504FC5E1\",\"PreviousTxnLgrSeq\":88533275}},{\"ModifiedNode\":{\"FinalFields\":{\"Account\":\"rNkJATb3PcVggEUcntMwt6b3662M1p44u3\",\"Asset\":{\"currency\":\"XRP\"},\"Asset2\":{\"currency\":\"4252414400000000000000000000000000000000\",\"issuer\":\"rBRAD8ntFu3yFhpoo7uLjj4EbVi2UQ1EMR\"},\"AuctionSlot\":{\"Account\":\"rEPR5XZjXDUMy65K5qUMgGFVqqo8CiA8AU\",\"DiscountedFee\":39,\"Expiration\":766234452,\"Price\":{\"currency\":\"0369BC054184BA4C655E4197B570C2AA25AFA8E4\",\"issuer\":\"rNkJATb3PcVggEUcntMwt6b3662M1p44u3\",\"value\":\"10000000\"}},\"Flags\":0,\"LPTokenBalance\":{\"currency\":\"0369BC054184BA4C655E4197B570C2AA25AFA8E4\",\"issuer\":\"rNkJATb3PcVggEUcntMwt6b3662M1p44u3\",\"value\":\"27151566861.22734\"},\"OwnerNode\":\"0\",\"TradingFee\":392,\"VoteSlots\":[{\"VoteEntry\":{\"Account\":\"rs4HULUYNcbwCmH4KokAk7pus6wRpgtfmg\",\"TradingFee\":750,\"VoteWeight\":6411}},{\"VoteEntry\":{\"Account\":\"r9eVykdjG58vsFk99GQozRbE7LTovFG6Py\",\"TradingFee\":1000,\"VoteWeight\":636}},{\"VoteEntry\":{\"Account\":\"rH9ZRJDe1dbrJY78gXpZWbhkqz94byf2Ab\",\"TradingFee\":8,\"VoteWeight\":9129}},{\"VoteEntry\":{\"Account\":\"rwQbT25TA3NEvTAHFxmfEZkMUfQ7tYJ7T6\",\"TradingFee\":330,\"VoteWeight\":0}},{\"VoteEntry\":{\"Account\":\"rpNmRsusXxqJoaDny4B3nVTqwkE1xDEDGt\",\"TradingFee\":1000,\"VoteWeight\":531}},{\"VoteEntry\":{\"Account\":\"r9dRhoGsmBStn3qdTq3mYychrFYneR6wn5\",\"TradingFee\":850,\"VoteWeight\":1099}},{\"VoteEntry\":{\"Account\":\"rp6Ak4Z5X6HcQZpuEWHJ7esuXHcwraFFAU\",\"TradingFee\":375,\"VoteWeight\":365}}]},\"LedgerEntryType\":\"AMM\",\"LedgerIndex\":\"A513513E3A227FE3A7920740EC8A336C68A166881930E455E16F28EED794D867\",\"PreviousFields\":{\"LPTokenBalance\":{\"currency\":\"0369BC054184BA4C655E4197B570C2AA25AFA8E4\",\"issuer\":\"rNkJATb3PcVggEUcntMwt6b3662M1p44u3\",\"value\":\"27155542602.10867\"}}}},{\"ModifiedNode\":{\"FinalFields\":{\"Balance\":{\"currency\":\"4252414400000000000000000000000000000000\",\"issuer\":\"rrrrrrrrrrrrrrrrrrrrBZbvji\",\"value\":\"-44644420621.16854\"},\"Flags\":16908288,\"HighLimit\":{\"currency\":\"4252414400000000000000000000000000000000\",\"issuer\":\"rNkJATb3PcVggEUcntMwt6b3662M1p44u3\",\"value\":\"0\"},\"HighNode\":\"0\",\"LowLimit\":{\"currency\":\"4252414400000000000000000000000000000000\",\"issuer\":\"rBRAD8ntFu3yFhpoo7uLjj4EbVi2UQ1EMR\",\"value\":\"0\"},\"LowNode\":\"180\"},\"LedgerEntryType\":\"RippleState\",\"LedgerIndex\":\"E8EE4E6C9AB9CF46887E15F9766C7B2734D7502BE6BB545350FA7C352A0BD961\",\"PreviousFields\":{\"Balance\":{\"currency\":\"4252414400000000000000000000000000000000\",\"issuer\":\"rrrrrrrrrrrrrrrrrrrrBZbvji\",\"value\":\"-44650957800.00224\"}},\"PreviousTxnID\":\"1DF6D18DC3BE6C63ABAF2236A9B68E807A7E13C0EEF4F82886C8912B72815EB4\",\"PreviousTxnLgrSeq\":88602916}},{\"ModifiedNode\":{\"FinalFields\":{\"Account\":\"raxq4QbVoAxFkWzggx54ZPjN98oLoqQF7J\",\"Balance\":\"344487372\",\"Flags\":0,\"OwnerCount\":7,\"Sequence\":86780514},\"LedgerEntryType\":\"AccountRoot\",\"LedgerIndex\":\"EB47A23F99C99D6B3ACEFE6882C87B415C838CB4ECF8B09BF23DA1DEAB58F4AC\",\"PreviousFields\":{\"Balance\":\"338082332\",\"Sequence\":86780513},\"PreviousTxnID\":\"BEBF4F42EA9072F73146A4D27D98E1CE75E2BFD49BE88BFB3A6924EF9133267C\",\"PreviousTxnLgrSeq\":88603407}}],\"TransactionIndex\":0,\"TransactionResult\":\"tesSUCCESS\"},\"validated\":true,\"date\":771377192,\"ledger_index\":88603511,\"inLedger\":88603511}"
}
```

This endpoint returns transaction details, including specification, outcome and rawTransaction data (Only available on paid API plans).
<br>
Page on bithomp that displays it:
<a href="https://xrplexplorer.com/explorer/277EE666435B4A5AB50FA7391E9D202D74EB29AEE56BA8E9D82E631BFD31F41F" style="word-break: break-word;">
  https://xrplexplorer.com/explorer/277EE666435B4A5AB50FA7391E9D202D74EB29AEE56BA8E9D82E631BFD31F41F
</a>.

### HTTP Request

`GET https://xrplexplorer.com/api/v2/transaction/<hash>`

### URL Parameters

Parameter | Description
--------- | -----------
hash | Transaction hash

## Tx Decode

```shell
curl "https://xrplexplorer.com/api/v2/transaction/decode/1200032280000000240000003241833237B8665D2F4E00135E8DE646589F68400000000000000C732103709723A5967EAAED571B71DB511D87FA44CC7CDDF827A37F457A25E14D862BCD74473045022100C6A6999BD33153C6A236D78438D1BFEEEC810CFE05D0E41339B577560C9143CA022074F07881F559F56593FF680049C12FC3BCBB0B73CE02338651522891D95886F981146078086881F39B191D63B528D914FEA7F8CA2293F9EA7C06636C69656E747D15426974686F6D7020746F6F6C20762E20302E302E337E0A706C61696E2F74657874E1F1"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
```

```javascript
function printData(json) {
  console.log(JSON.stringify(json, undefined, 2));
}
bithompRequest("https://xrplexplorer.com/api/v2/transaction/decode/1200032280000000240000003241833237B8665D2F4E00135E8DE646589F68400000000000000C732103709723A5967EAAED571B71DB511D87FA44CC7CDDF827A37F457A25E14D862BCD74473045022100C6A6999BD33153C6A236D78438D1BFEEEC810CFE05D0E41339B577560C9143CA022074F07881F559F56593FF680049C12FC3BCBB0B73CE02338651522891D95886F981146078086881F39B191D63B528D914FEA7F8CA2293F9EA7C06636C69656E747D15426974686F6D7020746F6F6C20762E20302E302E337E0A706C61696E2F74657874E1F1", printData);
```

```php
$data = curl_bithomp("https://xrplexplorer.com/api/v2/transaction/decode/1200032280000000240000003241833237B8665D2F4E00135E8DE646589F68400000000000000C732103709723A5967EAAED571B71DB511D87FA44CC7CDDF827A37F457A25E14D862BCD74473045022100C6A6999BD33153C6A236D78438D1BFEEEC810CFE05D0E41339B577560C9143CA022074F07881F559F56593FF680049C12FC3BCBB0B73CE02338651522891D95886F981146078086881F39B191D63B528D914FEA7F8CA2293F9EA7C06636C69656E747D15426974686F6D7020746F6F6C20762E20302E302E337E0A706C61696E2F74657874E1F1");
print $data;
```

> The above command returns JSON structured like this:

```json
{
  "id": "9B124C14528ED14C0BDA17075A39B90ABED598B77A22DFEEBD913CAC07A513BC",
  "signedTransaction": {
    "TransactionType": "AccountSet",
    "Flags": 2147483648,
    "Sequence": 50,
    "EmailHash": "833237B8665D2F4E00135E8DE646589F",
    "Fee": "12",
    "SigningPubKey": "03709723A5967EAAED571B71DB511D87FA44CC7CDDF827A37F457A25E14D862BCD",
    "TxnSignature": "3045022100C6A6999BD33153C6A236D78438D1BFEEEC810CFE05D0E41339B577560C9143CA022074F07881F559F56593FF680049C12FC3BCBB0B73CE02338651522891D95886F9",
    "Account": "r9onCSkYP2tYcukw2KUHMZ1Sn5YixQCgmN",
    "Memos": [
      {
        "Memo": {
          "MemoType": "636C69656E74",
          "MemoData": "426974686F6D7020746F6F6C20762E20302E302E33",
          "MemoFormat": "706C61696E2F74657874"
        }
      }
    ]
  }
}
```

This endpoint decode a signed transaction.
<br>
Page on bithomp with the same decode function, but client-side:
<a href="https://xrplexplorer.com/submit/">
  https://xrplexplorer.com/submit/
</a>.

### HTTP Request

`GET https://xrplexplorer.com/api/v2/transaction/decode/<blob>`

### URL Parameters

Parameter | Description
--------- | -----------
blob | A signed transaction blob to decode

## Tx Submit

```shell
curl -H "Content-Type: application/json"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
  --request POST
  --data '{"signedTransaction":"1200032280000000240000000368400000000000000C732103A71B44FD71C956C3CC0A540F2FBB577C4A300BC71244D86E4EB57220E58BFA26744730450221008D53E4188B39E8EF9953672B42C7ED3F7760F4B2FA51EC91A6EB0B693A6002B2022016384B9F552C75FD3BDE13C65E1CC3DA646AB10E3DD785EB2005620C6AF2C52B7710746573742E626974686F6D702E636F6D811485C536EFA7EAACCC51916E32FF720810A2226008F9EA7C06636C69656E747D16426974686F6D7020746F6F6C20762E20302E342E31317E0A706C61696E2F74657874E1F1","id":"BC35145B69F75FE5B41D6198D56203C2CFD2C1D968C09B09A37530CCB3AD2C6D"}'
  https://xrplexplorer.com/api/v2/transaction/submit/
```

```javascript
$.ajax({
   url: "https://xrplexplorer.com/api/v2/transaction/submit/",
   type: "POST",
   contentType: "application/json",
   headers: {
      "x-bithomp-token": "abcd-abcd-0000-abcd-0123abcdabcd"
   },
   data: {
     "signedTransaction": "1200032280000000240000000368400000000000000C732103A71B44FD71C956C3CC0A540F2FBB577C4A300BC71244D86E4EB57220E58BFA26744730450221008D53E4188B39E8EF9953672B42C7ED3F7760F4B2FA51EC91A6EB0B693A6002B2022016384B9F552C75FD3BDE13C65E1CC3DA646AB10E3DD785EB2005620C6AF2C52B7710746573742E626974686F6D702E636F6D811485C536EFA7EAACCC51916E32FF720810A2226008F9EA7C06636C69656E747D16426974686F6D7020746F6F6C20762E20302E342E31317E0A706C61696E2F74657874E1F1",
     "id": "BC35145B69F75FE5B41D6198D56203C2CFD2C1D968C09B09A37530CCB3AD2C6D"
   },
   success: function(result) {
      console.log(JSON.stringify(result, undefined, 2));
   },
   error: function(error) {
      console.log(error);
   }
});
```

> The above command returns JSON structured like one of those:

```json
{
  "result": "tesSUCCESS",
  "id": "BC35145B69F75FE5B41D6198D56203C2CFD2C1D968C09B09A37530CCB3AD2C6D"
}

{
  "result": "terNO_ACCOUNT",
  "message": "The source account does not exist.",
  "id": "BC35145B69F75FE5B41D6198D56203C2CFD2C1D968C09B09A37530CCB3AD2C6D"
}

{
  "result": "terPRE_SEQ",
  "message": "Missing/inapplicable prior transaction.",
  "id": "BC35145B69F75FE5B41D6198D56203C2CFD2C1D968C09B09A37530CCB3AD2C6D"
}

```

This endpoint returns a final status of a submitted transaction.
<br>
Page where it used on bithomp:
<a href="https://xrplexplorer.com/explorer/?hwlogin">
  https://xrplexplorer.com/explorer/?hwlogin
</a>.

### HTTP Request

`POST https://xrplexplorer.com/api/v2/transaction/submit`

### POST Parameters

Parameter | Description
--------- | -----------
id | (Optional) A calculated hash of the signed transaction
signedTransaction | A blob of signed transaction to submit

# Historical data

## Account Activations

```shell
curl "https://xrplexplorer.com/api/v2/account-chart?span=month&period=year"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
```

```javascript
function printData(json) {
  console.log(JSON.stringify(json, undefined, 2));
}
bithompRequest("https://xrplexplorer.com/api/v2/account-chart?span=month&period=year", printData);
```

```php
$data = curl_bithomp("https://xrplexplorer.com/api/v2/account-chart?span=month&period=year");
print $data;
```

> The above command returns JSON structured like this:

```json
{
  "span": "month",
  "period": "year",
  "chart": [
    {
      "time": "2023-10-31T23:59:59.999Z",
      "activations": 100
    },
    {
      "time": "2023-11-30T23:59:59.999Z",
      "activations": 78
    },
    {
      "time": "2023-12-31T23:59:59.999Z",
      "activations": 33834
    }
  ]
}
```

This endpoint returns data to draw a chart of account activations (available only on the Standard plan and higher).
<br>
Page where it used on bithomp:
<a href="https://xrplexplorer.com/activations">https://xrplexplorer.com/activations</a>.

### HTTP Request

`GET https://xrplexplorer.com/api/v2/account-chart`

### Response Format

Field | Value | Description
----- | ----- | -----------
period | `all` | A time period, all time `all`, last hour `hour`, last 24h `day`, last 7 days `week`, last 30 days `month`, last 365 days `year` or as timestamps from..to, examples: `1671490800000..1671663600000` or `2022-12-20T00:00:00.000Z..2022-12-22T00:00:00.000Z`
span | null | A time span for the chart, can be `minute`, `hour`, `day`, `month`, `year`, not all spans are available for large periods, for a period `hour` you can have `minute`, for periods up to 60 hours, you can have `hour`, `day`, `month`, for up to 60 days - `day`, `month`.

## Genesis

```shell
curl "https://xrplexplorer.com/api/v2/genesis"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
```

```javascript
function printData(json) {
  console.log(JSON.stringify(json, undefined, 2));
}
bithompRequest("https://xrplexplorer.com/api/v2/genesis", printData);
```

```php
$data = curl_bithomp("https://xrplexplorer.com/api/v2/genesis");
print $data;
```

> The above command returns JSON structured like this:

```json
{
  "count": 136,
  "inception": 1357010470,
  "ledger_index": 32570,
  "genesis_balance_all": 99999999999.99632,
  "balance_all": 483189349.682485,
  "balance_update": 1578499794,
  "genesis": [
    {
      "address": "rBKPS4oLSaV2KVVuHH8EpQqMGgGefGFQs7",
      "genesis_balance": 370,
      "genesis_index": 1,
      "balance": 20.009958
    },
    {
      "address": "rLs1MzkFWCxTbuAHgjeTZK4fcCDDnf2KRv",
      "genesis_balance": 10000,
      "genesis_index": 2,
      "rippletrade": "leotreasure",
      "balance": 4507.158497
    },
    {

    }
  ]
}
```

This endpoint retrieves a list of addresses from the first available ledger in XRPL history.
<br>
Page where it used on bithomp:
<a href="https://xrplexplorer.com/genesis">https://xrplexplorer.com/genesis</a>.

### HTTP Request

`GET https://xrplexplorer.com/api/v2/genesis`

### Response Format

Field | Value | Description
----- | ----- | -----------
count	| Integer	| The amount of returned addresses.
inception	| Integer	| Inception UNIX timestamp.
ledger_index | Integer | Ledger index (the first available in history).
genesis_balance_all | Float | Sum of all balances in the ledger_index.
balance_all | Float | Sum of balances of those addresses on the balance_update time.
balance_update | Integer | UNIX timestamp of the last update of balances.
genesis | Array | Array of addresses in ledger_index.
genesis[].address | String | Address
genesis[].genesis_balance | Float | XRP balance on that genesis[].address on the time of inception.
genesis[].genesis_index | Integer | Index of the address in the ledger_index.
genesis[].rippletrade | String | Username that genesis[].address used on rippletrade.com.
genesis[].nickname | String | Username that genesis[].address used on bitcointalk.org or assign by Ripple (X.).
genesis[].balance | Float | XRP balance on that genesis[].address on the time of balance_update.

## History of XRP price alerts

```shell
curl "https://xrplexplorer.com/api/v2/price/xrp/alerts"
  -H "x-bithomp-token: abcd-abcd-0000-abcd-0123abcdabcd"
```

```javascript
function printData(json) {
  console.log(JSON.stringify(json, undefined, 2));
}
bithompRequest("https://xrplexplorer.com/api/v2/price/xrp/alerts", printData);
```

```php
$data = curl_bithomp("https://xrplexplorer.com/api/v2/price/xrp/alerts");
print $data;
```

> The above command returns JSON structured like this:

```json
{
  "count": 50,
  "timestamp": 1578748266,
  "alerts": [
    {
      "currency": "btc",
      "change": "-10.07%",
      "timestamp_old": 1578344400,
      "timestamp_new": 1578415200,
      "rate_old": 0.00002959,
      "rate_new": 0.00002661
    },
    {
      "currency": "btc",
      "change": "+10.02%",
      "timestamp_old": 1578297600,
      "timestamp_new": 1578327600,
      "rate_old": 0.00002616,
      "rate_new": 0.00002878
    },
    {

    }
  ]
}
```

This endpoint retrieves a list of our XRP price alerts.
<br>
Page where it used on bithomp:
<a href="https://xrplexplorer.com/alerts">https://xrplexplorer.com/alerts</a>.

### HTTP Request

`GET https://xrplexplorer.com/api/v2/price/xrp/alerts`

### Response Format

Field | Value | Description
----- | ----- | -----------
count | Integer	The amount of returned alert records.
timestamp | Integer | UNIX timestamp for a request.
alerts | Array | Array of alert records.
genesis[].currency | String | Currency (in XRP/currency pair).
genesis[].change | String | Price change percentage (ex.: +10.24%).
genesis[].timestamp_old | Integer | Unix timestamp in seconds for the price: genesis[].rate_old.
genesis[].timestamp_new | Integer | Unix timestamp in seconds for the price: genesis[].rate_new.
genesis[].rate_old | Float | The price at genesis[].timestamp_old.
genesis[].rate_new | Float | The price at genesis[].timestamp_new.
